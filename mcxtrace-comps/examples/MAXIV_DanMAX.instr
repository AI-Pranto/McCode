/*******************************************************************************
*         McXtrace instrument definition URL=http://www.mcxtrace.org
*
* Instrument: MAXIV_DanMAX
*
* %Identification
* Written by: Erik B Knudsen (erkn@fysik.dtu.dk)
* Date: Aug 2015
* Origin: DTU Physics
* Release: McXtrace 1.2
* Version: 1.0
* %INSTRUMENT_SITE: MAXIV
*
* DanMAX Powder diffraction/Imaging beamline being designed at MAX IV.
*
* %Description
*  
* Design study model of the DanMAX PowderX/Imaging beamline.
* This early version uses a Gaussian approximation source, and a simple bandpass filter
* as the mulitlayer. 
*
* %Parameters
* E0  [keV] The central energy to sample from source model.
* DE  [keV] Spectral width (std. dev. if gaussian source) to sample from source model.
* undK [ ] Undulator K parameter, overrides E0.
* oh_premonoh [m] Pre-mono (white beam) slit height.
* oh_premonow [m] Pre-mono (white beam) slit width.
* oh_endh [m] OH exit slit height.
* oh_endw [m] OH exit slit width.
* PXRDsampleap_h [m] PXRD clean-up aperture height.
* PXRDsampleap_w [m] PXRD clean-up aperture width.
* DMM_angle [deg] Glancing angle of the ML.
* DCM_angle [deg] Glacing angle of the Si-111 monochromator crystals.
* DCM [ ] If nonzero the high-resolution SI DCM is active.
* DCM_e0 [keV] The energy to tune the Si monochromator to. May be different from E0. If 0 the DCM is controlled by DCM_angle.
* DMM [ ] If nonzero the multilayer mono is active.
* DMM_e0 [keV] The energy to tune the ML monochromator to. May be different from E0. If 0 the DMM is controlled by DMM_angle.
* OH_2DCRL_N [ ] Number of 2D focus CRLs in the optics hutch transfocator. 0 means transfocator is inactive.
* PXRD_STRIP [ ] If nonzero - the powder diffraction strip detector is active.
* PXRD_2D [ ] If nonzero, the powder diffraction area detector is active.
* pxrd_2d_tthc [ ] Rotation around the sample tube (i.e. the x-axis) of the 2d-area detector arm.
* pxrd_2d_y [m] Offset of 2d-area detector centre perpendicular to the detector arm.
* %End
*******************************************************************************/

/* Change name of instrument and input parameters with default values */
DEFINE INSTRUMENT MAXIV_DanMAX(E0=15,DE=0,undK=0,
        DCM_e0=0,DMM_e0=0, 
        oh_premonoh=5e-3,oh_premonow=5e-3,
        oh_endh=5e-3,oh_endw=5e-3,
        PXRDsampleap_h=2e-3, PXRDsampleap_w=2e-3,
        DMM_angle=0.996, DCM_angle=7.5742,
        DCM=0, DMM=0,
        OH_2DCRL_N=0,
        PXRD_STRIP=0,PXRD_2D=0,
        pxrd_2d_y=0,pxrd_2d_tthc=0,
        pxrd_strip_tth0=0  
)
/* The DECLARE section allows us to declare variables or  small      */
/* functions in C syntax. These may be used in the whole instrument. */
DECLARE
%{ 

    double FEMMw=0.7e-3, FEMMh=0.7e-3;

    double diamond_zd=1e-3;
    double oh_2dcrl_ap=0.4405e-3;

    double DMM_theta;
    double DMM_d;
    const double DMM_w=0.225;
    const double DMM_l=0.225;
    double DMM_rsag;
    double DMM_rmer;


    const char *ml_mono_Rfn="mirror_coating_unity.dat";

    double DCM_theta;
    double DCM_d;
    const double DCM_w=0.015;
    const double DCM_l=0.040;

    const double oh_2dcrl_r=200e-6;
    int oh_2dcrl_N;

    const double beam_xoff=10e-3;
    double midmono_xoff;

    double r;
    double energy0;
    double E1st;

    double monitor_E0;
    double monitor_DE;
    double Efull_min;
    double Efull_max;

    double SDD=760e-3;
    double dm_strip_tthg;/*angle gap between strip-detector blocks*/
    double dm_strip_deth,dm_strip_detw;/*height and width for a single strip-detector block*/
    double dm_strip_tth0;/*angle where strip detector coverage starts*/
    double dm_strip_tthc;/*angle coverag of single strip-detector_block*/

    double pxrd_2d_tthc;
    double pxrd_2d_y;
    const double pxrd_2d_px=172e-6;
    const double pxrd_2d_py=172e-6;
    const int pxrd_2d_nx=1475;
    const int pxrd_2d_ny=1679;
    int h=5;    

%}

/* The INITIALIZE section is executed when the simulation starts     */
/* (C code). You may use them as component parameter values.         */
INITIALIZE
%{
    DMM_theta=DMM_angle;
    energy0=E0;

    /*compute the monochromator angles from E0*/
    if (DCM_e0){
        energy0=DCM_e0;
        double wl=12.3984/DCM_e0;
        const double a_si = 5.431020504; /*in AA*/
        const double d_si111 = a_si/sqrt(3);
        const double f00=8*14;/*forward atomic scattering factor*/
        double th_b = asin(wl/(2*d_si111));  /* Bragg angle in rad*/
        double rel_displacement = 2*pow(d_si111,2.0)*f00*RE/(M_PI*pow(a_si,3.0));
        DCM_angle=RAD2DEG * (th_b* (1.0+rel_displacement));
        printf("DCM is tuned to E=%g keV corresponding to an angle of %g (%g + %g) deg.\n",DCM_e0, DCM_angle, th_b*RAD2DEG, rel_displacement*th_b*RAD2DEG); 
    }
    DCM_theta=DCM_angle;


    if(DMM_e0){
        /*if the DCM is not active => center the post mono energy monitors around DCM_e0.*/
        if (!DCM) energy0=DMM_e0;
        DMM_angle=14.45048/DMM_e0;
        printf("DMM is tuned to E=%g keV corresponding to an angle of %g deg.\n",DMM_e0, DMM_angle); 
    }
    DMM_theta=DMM_angle;

/* compute DCM curvature from energy */
    DMM_rsag= 1/(100*(4.483e-6 - (9e-8*E0)));
    DMM_rmer= 1/(100*(8.121e-5 - (1.975e-6*E0)));
    
/* set fine E-monitor parameters  */
    if(DCM && DCM_e0) {
        monitor_E0=DCM_e0;
        monitor_DE=DCM_e0*0.5e-3;
    }
    if(DCM && !DCM_e0) {
        monitor_E0=E0;
        monitor_DE=E0*0.5e-3;
    }   
    if(!DCM && DMM_e0) {
        monitor_E0=DMM_e0;
        monitor_DE=DMM_e0*3e-2;
    }   
    if(!DCM && !DMM_e0) {
        monitor_E0=E0;
        monitor_DE=E0*3e-2;
    }   

/* set coarse E-monitor parameters */
   Efull_min = E0-(0.5*DE);
   Efull_max = E0+(0.5*DE);

    if(DCM && DMM) {
        /*if si-mono and ml mono the beam is only partly displaced by the 1st si mono (6 mm)
        * The ml mono should probably have the largest  */
        midmono_xoff=6e-3;
        printf("si mono in, ml mono in\n"); 
        DMM_rsag=10e7;
        DMM_rmer=10e7;
    } else if (DCM && !DMM) {
        /*if si-mono and no ml mono the beam displacement is done in full by the 1st-mono*/
        midmono_xoff=beam_xoff;
        printf("si mono in, ml mono out\n"); 
    } else if (!DCM && DMM) {
        /*if only ml mono the displacement is doen in full by the 2nd mono*/
        midmono_xoff=0;
        printf("si mono out, ml mono in\n"); 
    } else {
        /*neither mono is inserted - disallowed*/
        fprintf(stderr,"Error (%s): must have at least one monochromator in. Please set DCM and/or DMM.\n","DanMAX.instr");
        exit(-1);
    }
    DCM_d=midmono_xoff/sin(2.0*DCM_theta*DEG2RAD);/**/
    DMM_d=(beam_xoff-midmono_xoff)/sin(2.0*DMM_theta*DEG2RAD);
    printf("ml mono offset is: %g, si mono offset is: %g\n",DMM_d,DCM_d);

    oh_2dcrl_N=OH_2DCRL_N;

    dm_strip_deth=1280*50e-6;
    dm_strip_detw=8e-3;
    dm_strip_tthc=RAD2DEG*atan(dm_strip_deth/SDD);
    dm_strip_tth0=pxrd_strip_tth0;/*angle where strip detector coverage starts*/

    /*calculate harmonic order and fundamental harmonic of the undulator*/
    if (E0>15.757){
	h=7;
    } else if (E0>20.253){
        h=9;
    } else if (E0>24.753){
	h=11;
    }else if (E0>29.254){
        h=13;
    }else if (E0>33.755){
        h=15;
    }

    E1st=1.0018*E0/h;

    printf("Test_DM_undulator: fundamental energy: %g, harmonic= %d, target energy= %g\n",E1st, h, E0);

    printf("strip prms: %g %g %g %g\n",dm_strip_deth,dm_strip_detw, dm_strip_tthc, dm_strip_tth0);
 
%}
/* Here comes the TRACE section, where the actual      */
/* instrument is defined as a sequence of components.  */
TRACE

/* The Arm() class component defines reference points and orientations  */
/* in 3D space. Every component instance must have a unique name. Here, */
/* Origin is used. This Arm() component is set to define the origin of  */
/* our global coordinate system (AT (0,0,0) ABSOLUTE). It may be used   */
/* for further RELATIVE reference, Other useful keywords are : ROTATED  */
/* EXTEND GROUP PREVIOUS. Also think about adding a neutron source !    */
/* Progress_bar is an Arm displaying simulation progress.               */

COMPONENT Origin = Progress_bar( )
AT (0,0,0) ABSOLUTE
EXTEND
%{
%}

COMPONENT dmu = Undulator(verbose=1, E0=E0, dE=DE, E1st=E1st,
        focus_yh=1.1e-3, focus_xw=1.1e-3, dist=20, Ie=0.5, Ee=3.0, dEe=0.0008, K=undK, B=0,
        quick_integ=1, Nper=187, lu=0.016, sigex=53.66e-6, sigey=4.008e-6, sigepx=5.963e-6, sigepy=2.004e-6)
AT(0,0,0) RELATIVE Origin


/* Monitors */
COMPONENT src_mon = DanMAX_monitor (filename = "src_mon", xwidth=5e-3, yheight=5e-3, ndiv=101, E0=monitor_E0, dE=monitor_DE, Efull_min=Efull_min, Efull_max=Efull_max, restore_xray=1)
AT (0,0,1) relative Origin

/*COMPONENT src_powden = PD_monitor (filename = "src_pden", xwidth=5e-4, yheight=5e-4, nx=201, ny=201, restore_xray=1)*/
/*AT (0,0,1) relative Origin*/

COMPONENT FM1 = Slit(
        xwidth=5.68e-3, yheight=5.68e-3)
AT(0,0,11.35) RELATIVE Origin

COMPONENT FM2 = Slit(
        xwidth=1.58e-3, yheight=1.58e-3)
AT(0,0,15.75) RELATIVE Origin

/* The beam defining movable mask */
COMPONENT FEMM = Slit(
        xwidth=FEMMw, yheight=FEMMh)
AT(0,0,19.324) RELATIVE Origin

/*FE wall*/

/*Optics hutch*/
COMPONENT oh0 = Arm()
AT(0,0,22.5) RELATIVE Origin

/* diamond_filters */
COMPONENT oh_diamond_filter1 = Filter(
        refraction=0,xwidth=0.01,yheight=0.01, zdepth=diamond_zd,material_datafile="C-diamond.txt")
AT(0,0,0.98) RELATIVE oh0


/* placeholder: A single laue crystal to deflect the "parasitic" beam */


/* pre-monochromator guard slits*/

/* MONITORS */
COMPONENT oh_premono_before_slit = COPY(src_mon)(filename="oh_premono_before_slit")
AT(0,0,2.059) RELATIVE oh0

COMPONENT oh_premono_ap = Slit(
    xwidth=oh_premonow,yheight=oh_premonoh)
AT(0,0,2.06) RELATIVE oh0

/* MONITORS */
COMPONENT oh_premono_after_slit = COPY(src_mon)(filename="oh_premono_after_slit")
AT(0,0,2.061) RELATIVE oh0

/* Optional high-resolution Si-111 monochromator.*/
COMPONENT DCM0_a0 = Arm()
AT(0,0,3.45) RELATIVE oh0
ROTATED(0,DCM_theta,0) RELATIVE oh0

COMPONENT DCM0 = Perfect_crystal(
        length=DCM_l, width=DCM_w, h=1, k=1, l=1, V=160.1826, alpha=0, material="Si.txt")
WHEN(DCM) AT(0,0,0) RELATIVE DCM0_a0
ROTATED (0,0,-90) RELATIVE DCM0_a0
EXTEND
%{
    if (!SCATTERED) ABSORB;
%}
COMPONENT DCM0_a1 = Arm()
AT(0,0,0) RELATIVE DCM0_a0
ROTATED (0,DCM_theta,0) RELATIVE DCM0_a0

COMPONENT DCM1_a0 = Arm()
AT(0,0,DCM_d) RELATIVE DCM0_a1
ROTATED (0,-DCM_theta,0) RELATIVE DCM0_a1

COMPONENT DCM1 = COPY(DCM0)()
WHEN(DCM) AT(0,0,0) RELATIVE DCM1_a0
ROTATED (0,0,90) RELATIVE DCM1_a0
EXTEND
%{
    if (!SCATTERED) ABSORB;
%}

COMPONENT DCM1_a1 = Arm()
AT(0,0,0) RELATIVE DCM1_a0
ROTATED (0,-DCM_theta,0) RELATIVE DCM1_a0

/* mid mono monitors */
COMPONENT oh_midmono = COPY(src_mon)(filename="oh_midmono")
AT(midmono_xoff,0,4.3) RELATIVE oh0


/* The Multilayer monochromator goes here - the displacement should be given depending on an input target energy*/
COMPONENT DMM0_a0= Arm()
AT(midmono_xoff,0,5.07) RELATIVE oh0
ROTATED (0,DMM_theta,0) RELATIVE oh0

/* if only DMM is used the first mirror is toroidal due to the heat bump */
COMPONENT DMM0a = Mirror_toroid(
        xwidth=DMM_w, zdepth=DMM_l, reflec="w_b4c_si_3AArghn_hires.dat", radius=DMM_rsag, radius_o=DMM_rmer)
WHEN (DMM && !DCM) AT (0,0,0) RELATIVE DMM0_a0
ROTATED (0,0,-90) RELATIVE DMM0_a0

/* if both monos are used, the first ML mirror is flat, no heat bump on it */
COMPONENT DMM0b = Mirror(
        xwidth=DMM_w, zdepth=DMM_l, reflec="w_b4c_si_3AArghn_hires.dat")
WHEN (DCM && DMM) AT (0,0,0) RELATIVE DMM0_a0
ROTATED (0,0,-90) RELATIVE DMM0_a0

COMPONENT DMM0_a1 = Arm()
AT(0,0,0) RELATIVE DMM0_a0
ROTATED(0,DMM_theta,0) RELATIVE DMM0_a0

COMPONENT DMM1_a0= Arm()
AT(0,0,DMM_d) RELATIVE DMM0_a1
ROTATED(0,-DMM_theta,0) RELATIVE DMM0_a1

COMPONENT DMM1 = Mirror(
        xwidth=DMM_w, zdepth=DMM_l, reflec="w_b4c_si_3AArghn_hires.dat")
WHEN (DMM) AT (0,0,0) RELATIVE PREVIOUS
ROTATED (0,0,90) RELATIVE PREVIOUS

COMPONENT DMM1_a1 = Arm()
AT(0,0,0) RELATIVE DMM1_a0
ROTATED(0,-DMM_theta,0) RELATIVE DMM1_a0


/* post mono monitors */
COMPONENT oh_postmono = COPY(src_mon)(filename="oh_postmono")
AT(beam_xoff,0,8.275) RELATIVE oh0


/* Focusing by CRLs 1D and 2D blocks */

COMPONENT oh_2dcrl_guard=Slit(radius=oh_2dcrl_ap)
WHEN(OH_2DCRL_N) AT(beam_xoff,0,8.4-0.01) RELATIVE oh0

COMPONENT oh_preCRL_after_aperture = COPY(src_mon)(filename="oh_preCRL_after_aperture")
AT(beam_xoff,0,8.4-0.005) RELATIVE oh0

COMPONENT oh_2dcrl= Lens_parab(
        r=oh_2dcrl_r, r_ap=oh_2dcrl_ap, material_datafile="Be.txt", N=oh_2dcrl_N, d=30e-6)
WHEN (OH_2DCRL_N) AT(beam_xoff,0,8.4) RELATIVE oh0


/* post CRL monitors: only in simulations, not a real BPM */
COMPONENT oh_postCRL = COPY(src_mon)(filename="oh_postCRL")
AT(beam_xoff,0,8.75) RELATIVE oh0

/* Aperture forming the exit of the optics hutch */


COMPONENT oh_end_ap = Slit(
    xwidth=oh_endw,yheight=oh_endh)
AT(beam_xoff,0,9.5) RELATIVE oh0

/* OH EXIT MONITORS */
COMPONENT oh_exit = COPY(src_mon)(filename="oh_exit")
AT(beam_xoff,0,9.9) RELATIVE oh0


/*The experimental hutch starts here*/
COMPONENT eh0 = Arm()
AT(beam_xoff,0,38.158) RELATIVE Origin

/* EH start monitors */
COMPONENT eh_start = COPY(src_mon)(filename="eh_start")
AT(0,0,0) RELATIVE eh0


/*imaging sample station*/
COMPONENT tomosample_pt = Arm()
AT(0,0,2) RELATIVE eh0 
/*TOMO DETECTOR*/
COMPONENT eh_tomo_sample = COPY(src_mon)(filename="eh_tomo_sample")
AT(0,0,0) RELATIVE Previous


COMPONENT PXRDsample_ap = Slit(
        xwidth=PXRDsampleap_w, yheight=PXRDsampleap_h)
AT(0,0,6.5) RELATIVE eh0

/*PXRD sample stations*/
COMPONENT pxrd_sample1_pt = Arm()
AT(0,0,6.5) RELATIVE eh0
COMPONENT eh_PXRD1_sample = COPY(src_mon)(filename="eh_PXRD1_sample")
AT(0,0,0) RELATIVE Previous
/*PXRD1 DETECTOR */

/*PXRD sample stations*/
COMPONENT pxrd_sample2_pt = Arm()
AT(0,0,8.5) RELATIVE eh0
COMPONENT eh_PXRD2_sample = COPY(src_mon)(filename="eh_PXRD2_sample")
AT(0,0,0) RELATIVE Previous



/*PXRD2 DETECTOR */
/* the powder diffraction detector section*/
//%include "dm_pxrd_strip_detectors2.instr"

/*COMPONENT pxrd_2d_a = Arm()*/
/*AT(0,0,0) RELATIVE pxrd_sample_pt*/
/*ROTATED (-pxrd_2d_tthc,0,0) RELATIVE pxrd_sample_pt*/
/**/
/*COMPONENT pxrd_2d = PSD_monitor(*/
/*    nx=pxrd_2d_nx,ny=pxrd_2d_ny,xwidth=pxrd_2d_nx*pxrd_2d_px, yheight=pxrd_2d_ny*pxrd_2d_py,filename="pxrd_2d")*/
/*AT(0,pxrd_2d_y,SDD) RELATIVE pxrd_2d_a*/

FINALLY
%{
%}
/* The END token marks the instrument definition end */
END






