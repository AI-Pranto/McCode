''' 
mcgui UI classes. 

Some autogenerated (do not edit).

@author: jaga
'''
import mccode_config
from mcguiutils import McGuiUtils
from mcfileutils import McComponentParser
from PyQt4 import QtCore, QtGui, Qsci


''' View class containing all windows and dialogs.
ALL explicit ui widget updates MUST be handled by this class
'''
class McView(object):
    def __init__(self):
        # create main window
        self.mw = McMainWindow()
        self.mw.ui.lblInstrument.setText("")
        self.ew = McCodeEditorWindow()
    
    def initMainWindowDynamicElements(self, args, callback):
        self.mw.initDynamicView(args, callback)
        
    def initCodeEditorComponentMenu(self, args):
        self.ew.initComponentMenu(args)
     
    def showMainWindow(self):
        self.mw.show()

    def showCodeEditorWindow(self, instr=''):
        self.ew.initCodeEditor(instr)
        self.ew.show()
    
    def closeCodeEditorWindow(self):
        return self.ew.close()    
    
    ''' Update UI data
    '''
    def updateInstrumentLabel(self, labels):
        self.mw.ui.lblInstrument.setText(labels[0])
        
    def updateStatus(self, text=''):
        self.mw.ui.statusbar.showMessage(text)
        
    def updateLog(self, text='', guiMsg=False, error=False):
        if guiMsg:
            if error:
                self.mw.ui.txtbrwMcgui.setTextColor(QtGui.QColor('red'))
            else:
                self.mw.ui.txtbrwMcgui.setTextColor(QtGui.QColor('black'))
            self.mw.ui.txtbrwMcgui.append(text)
        else:
            if error:
                self.mw.ui.txtbrwSim.setTextColor(QtGui.QColor('red'))
            else:
                self.mw.ui.txtbrwSim.setTextColor(QtGui.QColor('black'))
            self.mw.ui.txtbrwSim.append(text)
            
    def updateSimState(self, state=[]):
        canRun = state[0] == 'True'
        canPlot = state[1] == 'True'
        
        ui = self.mw.ui
        ui.btnRun.setEnabled(canRun)
        ui.btnEdit.setEnabled(canRun)
        ui.btnPlot.setEnabled(canPlot)
        if canRun:
            ui.lblInstrument.setStyleSheet('color: black')
        else:
            ui.lblInstrument.setStyleSheet('color: red')
        ui.actionClose_Instrument.setEnabled(canRun)
        ui.actionPlot.setEnabled(canPlot)
        ui.actionRun_Simulation.setEnabled(canRun)
        ui.actionSave_As.setEnabled(canRun)
        ui.actionEdit_Instrument.setEnabled(canRun)
        ui.actionCompile_Instrument.setEnabled(canRun)
        
    ''' UI actions
    '''
    def showOpenInstrumentDlg(self, lookDir):
        dlg = QtGui.QFileDialog()
        dlg.setDirectory(lookDir)
        dlg.setNameFilter("mcstas instruments (*.instr)");
        if dlg.exec_():
            return dlg.selectedFiles()[0]
    
    def showChangeWorkDirDlg(self, lookDir):
        dlg = QtGui.QFileDialog()
        dlg.setFileMode(QtGui.QFileDialog.Directory)
        dlg.setDirectory(lookDir)
        if dlg.exec_():
            return dlg.selectedFiles()[0]

    def showStartSimDialog(self, params):
        dlg = McStartSimDialog()
        dlg.createParamsWidgets(params)
        if dlg.exec_():
            return dlg.getValues()
        else: 
            return None, None
    
    def showNewInstrDialog(self, lookdir):
        dlg = QtGui.QFileDialog()
        dlg.setDirectory(lookdir)
        dlg.setNameFilter("mcstas instruments (*.instr)");
        return dlg.getSaveFileNameAndFilter(parent=None, caption=QtCore.QString('Create Instrument file...'))[0]
        
    
    def showNewInstrFromTemplateDialog(self, instr):
        dlg = QtGui.QFileDialog()
        return dlg.getSaveFileNameAndFilter(parent=None, caption=QtCore.QString('Create Instrument file from Template...'), directory=instr)[0]
        
    def showSaveAsDialog(self, instr):
        dlg = QtGui.QFileDialog()
        dlg.setFileMode(QtGui.QFileDialog.AnyFile)
        return dlg.getSaveFileNameAndFilter(parent=None, caption=QtCore.QString('Save Instrument As...'), directory=instr)[0]

    def showConfigDialog(self):
        dlg = McConfigDialog()
        dlg.initConfigData(None)
        dlg.exec_()
            
''' Main Window widgets wrapper class
Events callbacks are hooked elsewhere.
'''
class McMainWindow(QtGui.QMainWindow):
    def __init__(self, parent=None): 
        super(McMainWindow, self).__init__(parent)
        self.ui =  Ui_MainWindow()
        self.ui.setupUi(self)
        self.ui.dynamicMenuClicked = QtCore.pyqtSignal(QtCore.QString)
    
    def initDynamicView(self, args, callback):
        ''' - args ([str, [], []]): list of triplets consisting of site name, 
                                    [instrument names], [instrument file paths] 
            - callback (func(str)): function which takes a single string parameter, call with full path 
                                    name of selected instrument 
        '''
        self.ui.menuNew_From_Template.clear()
        
        for i in range(len(args)):
            site = args[i][0]
            instrs = args[i][1]
            instrs_fulpath = args[i][2]
            
            menu = self.ui.menuNew_From_Template.addMenu(site)
            
            for j in range(len(instrs)):
                action = menu.addAction(instrs[j])
                action.triggered[()].connect(lambda item=instrs_fulpath[j]: callback(item))
    

''' Code editor window widgets wrapper class
'''
class McCodeEditorWindow(QtGui.QMainWindow):    
    volatileDataExists = False
    volatileDataTransition = QtCore.pyqtSignal(bool)
    saveRequest = QtCore.pyqtSignal(QtCore.QString)
    
    def __init__(self, parent=None):
        super(McCodeEditorWindow, self).__init__(parent)
        self.ui =  Ui_EditorWindow()
        self.ui.setupUi(self)
        self.__initScintilla()
        self.__initCallbacks()
    
    def initComponentMenu(self, args):
        ''' args - [category, comp_names[], comp_parsers[]]
        '''
        for i in range(len(args)):
            category = args[i][0]
            comp_names = args[i][1]
            comp_parsers = args[i][2]
            
            menu = self.ui.menuInsert.addMenu(category)
            
            for j in range(len(comp_names)):
                action = menu.addAction(comp_names[j])
                action.triggered[()].connect(lambda comp_parser=comp_parsers[j]: self.__handleComponentClicked(comp_parser))
        
    def initCodeEditor(self, instr):
        if instr != '':
            self.__scintilla.setText(open(instr).read())
        else:
            self.__scintilla.setText('')
        self.setWindowTitle("mcstas: " + instr)
        self.assumeDataSaved()
        
    def assumeDataSaved(self):
        self.volatileDataTransition.emit(False)
 
    def closeEvent(self, event):
        ''' hook to display a "save changes?" dialog if there are unsaved changes 
        '''
        if self.volatileDataExists:
            reply = QtGui.QMessageBox.question(self, 
                                               'The instrument has been modified.', 
                                               'Do you want to save changes?',
                                               'Save',      # default button, reply == 0
                                               'Discard',   # reply == 1
                                               'Cancel')    # reply == 2
            if reply == 0:
                self.saveRequest.emit(self.__scintilla.text())
                self.assumeDataSaved()
                event.accept()
            elif reply == 1:
                event.accept()
            elif reply == 2:
                event.ignore()
        else:
            event.accept()
            
    def __handleComponentClicked(self, comp_parser):
        dlg = McInsertComponentDialog()
        dlg.initComponentData(comp_parser)
        if dlg.exec_():
            comp_type, inst_name, params, atrel = dlg.getValues()
        else: 
            return
        
        text = "COMPONENT " + inst_name + " = " + comp_type + "( "
        i_max = len(params)-1
        for i in range(len(params)):
            p = params[i]
            text += "\n    " + p[0] + "=" + p[1]
            if i < i_max:
                text += ", "

        text += ")"
        text += "\nAT (" + atrel[0] + "," + atrel[1] + ", " + atrel[2] + ") RELATIVE " + atrel[3] 
        text += "\nROTATED (" + atrel[4] + ", " + atrel[5] + ", " + atrel[6] + ") RELATIVE " + atrel[7]
        
        self.__scintilla.insert(text)
        
        # set cursor position
        i, j = self.__scintilla.getCursorPosition()
        pos = self.__scintilla.positionFromLineIndex(i, j)
        k, l = self.__scintilla.lineIndexFromPosition(pos + len(text))
        self.__scintilla.setCursorPosition(k, l)
        
    def __initScintilla(self):
        # delete text editor placeholder 
        scintilla = Qsci.QsciScintilla(self)
        
        # setup styles & behavior
        self.__setupScintilla(scintilla)
        
        # insert widget
        self.setCentralWidget(scintilla)
        self.__scintilla = scintilla
    
    @staticmethod
    def __setupScintilla(scintilla):
        # set default font
        font = QtGui.QFont()
        font.setFamily('Deja Vu Sans Mono')
        font.setFixedPitch(True)
        font.setPointSize(11)
        
        # set lexer
        lexer = Qsci.QsciLexerCPP()
        lexer.setDefaultFont(font)
        lexer.setFont(font)
        scintilla.setLexer(lexer)
        
        scintilla.setLexer(lexer)
        scintilla.__myLexer = lexer # save reference to retain scope
        
        # brace matching
        scintilla.setBraceMatching(Qsci.QsciScintilla.SloppyBraceMatch)
        
        # auto-completion example
        api = Qsci.QsciAPIs(lexer)
        api.add("COMPONENT")
        api.add("AT")
        api.add("RELATIVE")
        api.add("ROTATED")
        api.add("INSTRUMENT")
        api.add("DEFINE")
        api.add("DEFINITION")
        api.add("Arm")
        api.prepare()
        scintilla.__myApi = api # retain scope of api to avoid garbage collection
        
        scintilla.setAutoCompletionThreshold(1)
        scintilla.setAutoCompletionSource(Qsci.QsciScintilla.AcsAPIs)
        
        # remove horizontal scrollbar
        scintilla.SendScintilla(Qsci.QsciScintilla.SCI_SETHSCROLLBAR, 0)
        
    
    def __initCallbacks(self):
        # connect menu items to corresponding scintilla slots
        ui = self.ui 
        ui.actionUndo.triggered.connect(self.__scintilla.undo)
        ui.actionRedo.triggered.connect(self.__scintilla.redo)
        ui.actionSelect_All.triggered.connect(lambda: self.__scintilla.selectAll()) # why is l. expr. needed here?
        ui.actionCopy.triggered.connect(self.__scintilla.copy)
        ui.actionCut.triggered.connect(self.__scintilla.cut)
        ui.actionPaste.triggered.connect(self.__scintilla.paste)
        ui.actionSave.triggered.connect(self.__handleSaveAction)
        ui.actionClose_Instrument_Editor.triggered.connect(self.close)
        ui.actionComponent_Browser.triggered.connect(self.__handleComponentBrowser)
        
        # connect "text changed" signal to our handler to detect unsaved changes
        self.__scintilla.textChanged.connect(self.__handleTextChanged)
        
        self.volatileDataTransition.connect(self.__handleVolatileDataPresent)
    
    def __handleComponentBrowser(self):
        # TODO: get home dir in a sys-indep way
        dlg = QtGui.QFileDialog()
        dlg.setDirectory(mccode_config.configuration["MCCODE_LIB_DIR"])
        dlg.setNameFilter("mcstas component files (*.comp)");
        if dlg.exec_():
            comp_file = dlg.selectedFiles()[0]
            parser = McComponentParser(comp_file)
            self.__handleComponentClicked(parser)
    
    def __handleTextChanged(self):
        if not self.volatileDataExists:
            self.volatileDataTransition.emit(True)
    
    def __handleSaveAction(self):
        self.saveRequest.emit(self.__scintilla.text())
        
    def __handleVolatileDataPresent(self, volatileDataExists=False):
        if volatileDataExists:
            title = self.windowTitle()
            self.setWindowTitle('*' + title)
        else:
            title = str(self.windowTitle())
            self.setWindowTitle(title.replace('*', ''))
        self.volatileDataExists = volatileDataExists
        self.ui.actionSave.setEnabled(volatileDataExists)


''' Start simulation widgets wrapper class
Programatically alters the dialog to match current instrument.
Supports reuse of widgets from sim to sim, to retain input values.
Works as a dialog - call _exec(), probe for return behavior and
state to proceed.
'''
class McStartSimDialog(QtGui.QDialog):
    def __init__(self, parent=None):
        super(McStartSimDialog, self).__init__(parent)
        self.ui = Ui_dlgStartSim()
        self.ui.setupUi(self)
        self.ui.btnStart.clicked.connect(self.accept)
        self.ui.btnCancel.clicked.connect(self.reject)
        
    def getValues(self):
        ''' Return values:
        
            fixed_params[]:
                simulation = 0, trace = 1
                neutron count (int)
                steps count (int)
                gravity (bool)
                random seed (int)
                no clustering = 0, MPI clustering = 1, SSH clustering = 2
                
            params[]:
                [<par_name>, <value>] pairs
        '''
        # simulation or trace option
        p0 = None
        if self.ui.cbxSimTrace.currentIndex() == 0:
            p0 = SimTraceEnum.SIM
        else:
            p0 = SimTraceEnum.TRACE
        
        # neutron count
        p1 = self.ui.edtNeutronCnt.text()
        
        # steps
        p2 = self.ui.edtSteps.text()
        
        # gravity
        p3 = self.ui.checkBox.checkState()
        
        # clustering option 
        p4 = None
        if self.ui.cbxClustering.currentIndex() == 0:
            p4 = ClusteringEnum.SINGLE
        if self.ui.cbxClustering.currentIndex() == 1:
            p4 = ClusteringEnum.MPI
        if self.ui.cbxClustering.currentIndex() == 2:
            p4 = ClusteringEnum.SSH
            
        # clustring option
        p5 = self.ui.edtNodes.text()

        # seed
        p6 = self.ui.lineEdit.text()
        
        fixed_params =[p0, p1, p2, p3, p4, p5, p6]
        
        # get dynamic params
        params = []
        for w in self.__wParams:
            p = []
            p.append(str(w[0].text()).rstrip(':'))
            p.append(str(w[1].text()))
            params.append(p)
        
        return fixed_params, params
    
    __wParams = []
    def createParamsWidgets(self, params):
        # clear the containing grid
        grd = self.ui.gridLayout
        for i in reversed(range(grd.count())): 
            grd.itemAt(i).widget().setParent(None)
            
        self.__wParams = None
        self.__wParams = []
        # insert custom params widgets
        i = -1
        x = 0
        y = 0
        for p in params:
            name = QtCore.QString(p[0])
            value = QtCore.QString(p[1])
            
            i = i + 1
            x = i % 6
            y = i / 6
            
            lbl = QtGui.QLabel(self.ui.gbxGrid)
            lbl.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
            lbl.setObjectName("lbl" + name)
            lbl.setText(name + ':')
            self.ui.gridLayout.addWidget(lbl, y, x, 1, 1)
            
            i = i + 1
            x = i % 6
            
            edt = QtGui.QLineEdit(self.ui.gbxGrid)
            edt.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
            edt.setObjectName("edt" + name)
            edt.setText(value)
            self.ui.gridLayout.addWidget(edt, y, x, 1, 1)
            
            self.__wParams.append([lbl, edt])
        self.ui.btnStart.setFocus()

class SimTraceEnum:
    SIM = 0
    TRACE = 1

class ClusteringEnum:
    SINGLE = 0 
    MPI = 1
    SSH = 2


''' Start simulation widgets wrapper class
Programatically alters the dialog to match current instrument.
Supports reuse of widgets from sim to sim, to retain input values.
Works as a dialog - call _exec(), probe for return behavior and
state to proceed.
'''
class McInsertComponentDialog(QtGui.QDialog):
    __standard_le_style = None
    def __init__(self, parent=None):
        super(McInsertComponentDialog, self).__init__(parent)
        self.ui = Ui_dlgInsertComponent()
        self.ui.setupUi(self)
        self.ui.btnInsert.clicked.connect(self.accept)
        self.ui.btnCancel.clicked.connect(self.reject)
        self.__standard_le_style = self.ui.edtInstanceName.styleSheet()
        
    def accept(self):
        # detect missing default values
        dirty = False
        
        # mark/unmark params dynamic lineedits
        first_params_hit = True
        for w in self.__wParams:
            if w[1].text() == '':
                w[1].setStyleSheet("border: 3px solid red;")
                dirty = True
                if first_params_hit:
                    w[1].setFocus()
                    first_params_hit = False
            else:
                w[1].setStyleSheet(self.__standard_le_style)
        
        # mark/unmark instance name lineedit
        if self.ui.edtInstanceName.text() == '':
            self.ui.edtInstanceName.setStyleSheet("border: 3px solid red;")
            if not dirty:
                self.ui.edtInstanceName.setFocus()
            dirty = True
        else:
            self.ui.edtInstanceName.setStyleSheet(self.__standard_le_style)
                
        # exit if all lineedit text boxes are filled out 
        if not dirty:
            super(McInsertComponentDialog, self).accept()
    
    __wParams = []
    def initComponentData(self, comp_parser):
        # parse component info
        comp_parser.parse()
        
        # window title
        self.setWindowTitle("Component: " + comp_parser.name)
        
        # info & description docstrings
        info_description = comp_parser.info + '\n\n' + comp_parser.description
        self.ui.lblDescr.setText(info_description)
        
        # clear params grd
        grd = self.ui.gridParameters
        for i in reversed(range(grd.count())): 
            grd.itemAt(i).widget().setParent(None)
        
        # populate and init params grd
        self.__wParams = None
        self.__wParams = []
        for i in range(len(comp_parser.pars)):
            par = McComponentParser.McComponentParInfo(comp_parser.pars[i])
            
            # i'th line/row of the UI
            y = i
            
            # parameter name label
            x = 0
            lbl = QtGui.QLabel()
            lbl.setObjectName("lbl" + par.par_name)
            lbl.setText(par.par_name + ':')
            self.ui.gridParameters.addWidget(lbl, y, x, 1, 1)
            
            # parameter value line-edit
            x = 1
            edt = QtGui.QLineEdit()
            edt.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
            edt.setObjectName("edt" + par.par_name)
            edt.setText(par.default_value)
            self.ui.gridParameters.addWidget(edt, y, x, 1, 1)
            
            # save name, value widget references for use in self.getValues
            self.__wParams.append([lbl, edt])
            
            # parameter docstring label
            x = 2
            lbl = QtGui.QLabel()
            lbl.setWordWrap(True)
            lbl.setObjectName("lbl" + par.par_name + "_doc")
            lbl.setText(par.doc_and_unit)
            self.ui.gridParameters.addWidget(lbl, y, x, 1, 1)
            
        # fix tab-order
        q = self.ui.btnInsert 
        for i in range(len(self.__wParams)):
            w = self.__wParams[i][1]
            self.setTabOrder(q, w)
            q = w
        self.setTabOrder(q, self.ui.edtAtX)
            
        # init instance-name field with an example, mark the text
        tbx = self.ui.edtInstanceName
        tbx.setText(str.lower(comp_parser.name))
        tbx.setFocus()
        tbx.selectAll()
        
    def getValues(self):
        ''' 
        inst_name : contents of instance name field 
        params : list of [name, value] pairs matching component parameters
        '''
        # instance name
        inst_name = self.ui.edtInstanceName.text()
        comp_type = str(self.windowTitle()).lstrip('Component: ')
        
        # get dynamic params
        params = []
        for w in self.__wParams:
            p = []
            p.append(str(w[0].text()).rstrip(':'))
            p.append(str(w[1].text()))
            params.append(p)
        
        # get values for AT(x,y,z), RELATIVE <posrel>, ROTATED(x,y,z), RELATIVE <rotrel> 
        atrel = []
        atrel.append(self.ui.edtAtX.text())
        atrel.append(self.ui.edtAtY.text())
        atrel.append(self.ui.edtAtZ.text())
        atrel.append(self.ui.edtAtRel.text())
        atrel.append(self.ui.edtRotX.text())
        atrel.append(self.ui.edtRotY.text())
        atrel.append(self.ui.edtRotZ.text())
        atrel.append(self.ui.edtRotRel.text())
        
        return comp_type, inst_name, params, atrel


''' mcgui config widgets wrapper class
'''
class McConfigDialog(QtGui.QDialog):
    __standard_le_style = None
    def __init__(self, parent=None):
        super(McConfigDialog, self).__init__(parent)
        self.ui = Ui_dlgConfig()
        self.ui.setupUi(self)
        
        self.ui.btnOk.clicked.connect(self.accept)
        self.ui.btnSave.clicked.connect(self.save)
        self.ui.btnCancel.clicked.connect(self.reject)
    
    def initConfigData(self, args):
        # comboboxes
        mcrun_lst, mcplot_lst, mcdisplay_lst = McGuiUtils.getMcCodeConfigOptions()
        
        # mcrun combobox
        selected_val = mccode_config.configuration["MCRUN"]
        i = 0
        for val in mcrun_lst: 
            self.ui.cbxMcrun.addItem(val)
            if val == selected_val:
                self.ui.cbxMcrun.setCurrentIndex(i)
            i += 1
        self.ui.cbxMcrun.conf_var = "MCRUN"
        self.ui.cbxMcrun.conf_org_value = mccode_config.configuration["MCRUN"]
        self.ui.cbxMcrun.conf_options_lst = mcrun_lst
        
        # mcplot combobox
        selected_val = mccode_config.configuration["MCPLOT"]
        i = 0
        for val in mcplot_lst: 
            self.ui.cbxMcPlot.addItem(val)
            if val == selected_val:
                self.ui.cbxMcPlot.setCurrentIndex(i)
            i += 1
        self.ui.cbxMcPlot.conf_var = "MCPLOT"
        self.ui.cbxMcPlot.conf_org_value = mccode_config.configuration["MCPLOT"]
        self.ui.cbxMcPlot.conf_options_lst = mcplot_lst
        
        # mcdisplay combobox
        selected_val = mccode_config.configuration["MCDISPLAY"]
        i = 0
        for val in mcdisplay_lst: 
            self.ui.cbxMcdisplay.addItem(val)
            if val == selected_val:
                self.ui.cbxMcdisplay.setCurrentIndex(i)
            i += 1
        self.ui.cbxMcdisplay.conf_var = "MCDISPLAY"
        self.ui.cbxMcdisplay.conf_org_value = mccode_config.configuration["MCDISPLAY"]
        self.ui.cbxMcdisplay.conf_options_lst = mcdisplay_lst
        
        # line edits
        self.ui.edtCC.setText(mccode_config.compilation["CC"])
        self.ui.edtCC.conf_var = "CC"
        
        self.ui.edtCflags.setText(mccode_config.compilation["CFLAGS"])
        self.ui.edtCflags.conf_var = "CFLAGS"
        
        self.ui.edtMpicc.setText(mccode_config.compilation["MPICC"])
        self.ui.edtMpicc.conf_var = "MPICC"
        
        self.ui.edtMPIrun.setText(mccode_config.compilation["MPIRUN"])
        self.ui.edtMPIrun.conf_var = "MPIRUN"
        
        self.ui.edtNumNodes.setText(mccode_config.compilation["MPINODES"])
        self.ui.edtNumNodes.conf_var = "MPINODES"
    
    def __pullValuesTo_mccode_config(self):
        # mcrun combobox
        i = self.ui.cbxMcrun.currentIndex()
        mccode_config.configuration["MCRUN"] = self.ui.cbxMcrun.conf_options_lst[i]
        
        # mcrun combobox
        i = self.ui.cbxMcPlot.currentIndex()
        mccode_config.configuration["MCPLOT"] = self.ui.cbxMcPlot.conf_options_lst[i]
        
        # mcrun combobox
        i = self.ui.cbxMcdisplay.currentIndex()
        mccode_config.configuration["MCDISPLAY"] = self.ui.cbxMcdisplay.conf_options_lst[i]
        
        # line edits
        mccode_config.compilation[str(self.ui.edtCC.conf_var)] = str(self.ui.edtCC.text())
        mccode_config.compilation[str(self.ui.edtCflags.conf_var)] = str(self.ui.edtCflags.text())
        mccode_config.compilation[str(self.ui.edtMpicc.conf_var)] = str(self.ui.edtMpicc.text())
        mccode_config.compilation[str(self.ui.edtMPIrun.conf_var)] = str(self.ui.edtMPIrun.text())
        mccode_config.compilation[str(self.ui.edtNumNodes.conf_var)] = str(self.ui.edtNumNodes.text())
    
    def accept(self):
        self.__pullValuesTo_mccode_config()
        
        # finally
        super(McConfigDialog, self).accept()
    
    def save(self):
        self.__pullValuesTo_mccode_config()
        McGuiUtils.saveUserConfig(mccode_config)
        
        # finally
        super(McConfigDialog, self).accept()
        

''' Main window ui widget setup.
Auto-generated view created with QtCreator.
Generate from .ui source with pyside-uic. 
Do not edit.
'''
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setToolTip("")
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtGui.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gbxInstrument = QtGui.QGroupBox(self.centralwidget)
        self.gbxInstrument.setObjectName("gbxInstrument")
        self.verticalLayout_2 = QtGui.QVBoxLayout(self.gbxInstrument)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.grdInstrument = QtGui.QGridLayout()
        self.grdInstrument.setObjectName("grdInstrument")
        self.lblInstrument = QtGui.QLabel(self.gbxInstrument)
        self.lblInstrument.setObjectName("lblInstrument")
        self.grdInstrument.addWidget(self.lblInstrument, 2, 1, 1, 1)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.grdInstrument.addItem(spacerItem, 0, 1, 1, 5)
        self.btnRun = QtGui.QPushButton(self.gbxInstrument)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btnRun.sizePolicy().hasHeightForWidth())
        self.btnRun.setSizePolicy(sizePolicy)
        self.btnRun.setObjectName("btnRun")
        self.grdInstrument.addWidget(self.btnRun, 0, 6, 1, 1)
        self.btnPlot = QtGui.QPushButton(self.gbxInstrument)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btnPlot.sizePolicy().hasHeightForWidth())
        self.btnPlot.setSizePolicy(sizePolicy)
        self.btnPlot.setObjectName("btnPlot")
        self.grdInstrument.addWidget(self.btnPlot, 0, 7, 1, 1)
        self.btnEdit = QtGui.QPushButton(self.gbxInstrument)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btnEdit.sizePolicy().hasHeightForWidth())
        self.btnEdit.setSizePolicy(sizePolicy)
        self.btnEdit.setObjectName("btnEdit")
        self.grdInstrument.addWidget(self.btnEdit, 2, 7, 1, 1)
        self.btnOpenInstrument = QtGui.QPushButton(self.gbxInstrument)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btnOpenInstrument.sizePolicy().hasHeightForWidth())
        self.btnOpenInstrument.setSizePolicy(sizePolicy)
        self.btnOpenInstrument.setObjectName("btnOpenInstrument")
        self.grdInstrument.addWidget(self.btnOpenInstrument, 2, 6, 1, 1)
        spacerItem1 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.grdInstrument.addItem(spacerItem1, 2, 2, 1, 4)
        self.verticalLayout_2.addLayout(self.grdInstrument)
        self.verticalLayout.addWidget(self.gbxInstrument)
        self.hlyMessages = QtGui.QHBoxLayout()
        self.hlyMessages.setObjectName("hlyMessages")
        self.gbxMessages = QtGui.QGroupBox(self.centralwidget)
        self.gbxMessages.setObjectName("gbxMessages")
        self.verticalLayout_3 = QtGui.QVBoxLayout(self.gbxMessages)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.tbxMessages = QtGui.QTabWidget(self.gbxMessages)
        self.tbxMessages.setObjectName("tbxMessages")
        self.tabMcgui = QtGui.QWidget()
        self.tabMcgui.setObjectName("tabMcgui")
        self.verticalLayout_4 = QtGui.QVBoxLayout(self.tabMcgui)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.txtbrwMcgui = QtGui.QTextBrowser(self.tabMcgui)
        self.txtbrwMcgui.setObjectName("txtbrwMcgui")
        self.verticalLayout_4.addWidget(self.txtbrwMcgui)
        self.tbxMessages.addTab(self.tabMcgui, "")
        self.tabSim = QtGui.QWidget()
        self.tabSim.setObjectName("tabSim")
        self.verticalLayout_5 = QtGui.QVBoxLayout(self.tabSim)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.txtbrwSim = QtGui.QTextBrowser(self.tabSim)
        self.txtbrwSim.setObjectName("txtbrwSim")
        self.verticalLayout_5.addWidget(self.txtbrwSim)
        self.tbxMessages.addTab(self.tabSim, "")
        self.verticalLayout_3.addWidget(self.tbxMessages)
        self.hlyMessages.addWidget(self.gbxMessages)
        self.verticalLayout.addLayout(self.hlyMessages)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 25))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtGui.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuNew_From_Template = QtGui.QMenu(self.menuFile)
        self.menuNew_From_Template.setObjectName("menuNew_From_Template")
        self.menuSimulation = QtGui.QMenu(self.menubar)
        self.menuSimulation.setObjectName("menuSimulation")
        self.menuHelp = QtGui.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtGui.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen_instrument = QtGui.QAction(MainWindow)
        self.actionOpen_instrument.setObjectName("actionOpen_instrument")
        self.actionQuit = QtGui.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.actionRun_Simulation = QtGui.QAction(MainWindow)
        self.actionRun_Simulation.setObjectName("actionRun_Simulation")
        self.actionCompile_Instrument = QtGui.QAction(MainWindow)
        self.actionCompile_Instrument.setObjectName("actionCompile_Instrument")
        self.actionMcstas_User_Manual = QtGui.QAction(MainWindow)
        self.actionMcstas_User_Manual.setObjectName("actionMcstas_User_Manual")
        self.actionMcstas_Web_Page = QtGui.QAction(MainWindow)
        self.actionMcstas_Web_Page.setObjectName("actionMcstas_Web_Page")
        self.actionAbout = QtGui.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionMcstas_Component_Manual = QtGui.QAction(MainWindow)
        self.actionMcstas_Component_Manual.setObjectName("actionMcstas_Component_Manual")
        self.actionNew_Instrument = QtGui.QAction(MainWindow)
        self.actionNew_Instrument.setObjectName("actionNew_Instrument")
        self.actionEdit_Instrument = QtGui.QAction(MainWindow)
        self.actionEdit_Instrument.setObjectName("actionEdit_Instrument")
        self.actionClose_Instrument = QtGui.QAction(MainWindow)
        self.actionClose_Instrument.setObjectName("actionClose_Instrument")
        self.actionPlot = QtGui.QAction(MainWindow)
        self.actionPlot.setObjectName("actionPlot")
        self.actionSave_As = QtGui.QAction(MainWindow)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionTempl_submenu = QtGui.QAction(MainWindow)
        self.actionTempl_submenu.setObjectName("actionTempl_submenu")
        self.actionConfiguration = QtGui.QAction(MainWindow)
        self.actionConfiguration.setObjectName("actionConfiguration")
        self.menuNew_From_Template.addAction(self.actionTempl_submenu)
        self.menuFile.addAction(self.actionNew_Instrument)
        self.menuFile.addAction(self.menuNew_From_Template.menuAction())
        self.menuFile.addAction(self.actionOpen_instrument)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionEdit_Instrument)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addAction(self.actionClose_Instrument)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionConfiguration)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuSimulation.addAction(self.actionRun_Simulation)
        self.menuSimulation.addAction(self.actionCompile_Instrument)
        self.menuSimulation.addSeparator()
        self.menuSimulation.addAction(self.actionPlot)
        self.menuHelp.addAction(self.actionMcstas_User_Manual)
        self.menuHelp.addAction(self.actionMcstas_Component_Manual)
        self.menuHelp.addAction(self.actionMcstas_Web_Page)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuSimulation.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.tbxMessages.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QtGui.QApplication.translate("MainWindow", "mcgui-py", None, QtGui.QApplication.UnicodeUTF8))
        self.gbxInstrument.setTitle(QtGui.QApplication.translate("MainWindow", "Instrument:", None, QtGui.QApplication.UnicodeUTF8))
        self.lblInstrument.setText(QtGui.QApplication.translate("MainWindow", "<Instrument file>", None, QtGui.QApplication.UnicodeUTF8))
        self.btnRun.setText(QtGui.QApplication.translate("MainWindow", "Run...", None, QtGui.QApplication.UnicodeUTF8))
        self.btnPlot.setText(QtGui.QApplication.translate("MainWindow", "Plot", None, QtGui.QApplication.UnicodeUTF8))
        self.btnEdit.setText(QtGui.QApplication.translate("MainWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
        self.btnOpenInstrument.setToolTip(QtGui.QApplication.translate("MainWindow", "Browse instrument...", None, QtGui.QApplication.UnicodeUTF8))
        self.btnOpenInstrument.setText(QtGui.QApplication.translate("MainWindow", "Open...", None, QtGui.QApplication.UnicodeUTF8))
        self.gbxMessages.setTitle(QtGui.QApplication.translate("MainWindow", "Messages:", None, QtGui.QApplication.UnicodeUTF8))
        self.tbxMessages.setTabText(self.tbxMessages.indexOf(self.tabMcgui), QtGui.QApplication.translate("MainWindow", "mcgui", None, QtGui.QApplication.UnicodeUTF8))
        self.tbxMessages.setTabText(self.tbxMessages.indexOf(self.tabSim), QtGui.QApplication.translate("MainWindow", "Simulations", None, QtGui.QApplication.UnicodeUTF8))
        self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
        self.menuNew_From_Template.setTitle(QtGui.QApplication.translate("MainWindow", "New From Template...", None, QtGui.QApplication.UnicodeUTF8))
        self.menuSimulation.setTitle(QtGui.QApplication.translate("MainWindow", "Simulation", None, QtGui.QApplication.UnicodeUTF8))
        self.menuHelp.setTitle(QtGui.QApplication.translate("MainWindow", "Help", None, QtGui.QApplication.UnicodeUTF8))
        self.actionOpen_instrument.setText(QtGui.QApplication.translate("MainWindow", "Open...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionOpen_instrument.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+O", None, QtGui.QApplication.UnicodeUTF8))
        self.actionQuit.setText(QtGui.QApplication.translate("MainWindow", "Quit", None, QtGui.QApplication.UnicodeUTF8))
        self.actionQuit.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+Q", None, QtGui.QApplication.UnicodeUTF8))
        self.actionRun_Simulation.setText(QtGui.QApplication.translate("MainWindow", "Run Simulation...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionRun_Simulation.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+R", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCompile_Instrument.setText(QtGui.QApplication.translate("MainWindow", "Compile Instrument", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCompile_Instrument.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+Shift+R", None, QtGui.QApplication.UnicodeUTF8))
        self.actionMcstas_User_Manual.setText(QtGui.QApplication.translate("MainWindow", "mcstas User Manual", None, QtGui.QApplication.UnicodeUTF8))
        self.actionMcstas_Web_Page.setText(QtGui.QApplication.translate("MainWindow", "mcstas Web Page", None, QtGui.QApplication.UnicodeUTF8))
        self.actionAbout.setText(QtGui.QApplication.translate("MainWindow", "About...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionAbout.setShortcut(QtGui.QApplication.translate("MainWindow", "F1", None, QtGui.QApplication.UnicodeUTF8))
        self.actionMcstas_Component_Manual.setText(QtGui.QApplication.translate("MainWindow", "mcstas Component Manual", None, QtGui.QApplication.UnicodeUTF8))
        self.actionNew_Instrument.setText(QtGui.QApplication.translate("MainWindow", "New Instrument...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionNew_Instrument.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+N", None, QtGui.QApplication.UnicodeUTF8))
        self.actionEdit_Instrument.setText(QtGui.QApplication.translate("MainWindow", "Edit...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionEdit_Instrument.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+E", None, QtGui.QApplication.UnicodeUTF8))
        self.actionClose_Instrument.setText(QtGui.QApplication.translate("MainWindow", "Close Instrument", None, QtGui.QApplication.UnicodeUTF8))
        self.actionClose_Instrument.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+W", None, QtGui.QApplication.UnicodeUTF8))
        self.actionPlot.setText(QtGui.QApplication.translate("MainWindow", "Plot", None, QtGui.QApplication.UnicodeUTF8))
        self.actionPlot.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+P", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSave_As.setText(QtGui.QApplication.translate("MainWindow", "Save As...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSave_As.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+Shift+S", None, QtGui.QApplication.UnicodeUTF8))
        self.actionTempl_submenu.setText(QtGui.QApplication.translate("MainWindow", "new_from_templ_submenu", None, QtGui.QApplication.UnicodeUTF8))
        self.actionConfiguration.setText(QtGui.QApplication.translate("MainWindow", "Configuration...", None, QtGui.QApplication.UnicodeUTF8))


''' Edit instrument window
Auto-generated view created with QtCreator.
Generate from .ui source with pyside-uic. 
Do not edit. 
'''
class Ui_EditorWindow(object):
    def setupUi(self, EditorWindow):
        EditorWindow.setObjectName("EditorWindow")
        EditorWindow.resize(920, 800)
        self.centralwidget = QtGui.QWidget(EditorWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtGui.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        EditorWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(EditorWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 920, 25))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtGui.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtGui.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QtGui.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuInsert = QtGui.QMenu(self.menubar)
        self.menuInsert.setObjectName("menuInsert")
        EditorWindow.setMenuBar(self.menubar)
        self.statusbar = QtGui.QStatusBar(EditorWindow)
        self.statusbar.setObjectName("statusbar")
        EditorWindow.setStatusBar(self.statusbar)
        self.actionComponent_Browser = QtGui.QAction(EditorWindow)
        self.actionComponent_Browser.setObjectName("actionComponent_Browser")
        self.actionCompDummy = QtGui.QAction(EditorWindow)
        self.actionCompDummy.setObjectName("actionCompDummy")
        self.actionSource_Optimize = QtGui.QAction(EditorWindow)
        self.actionSource_Optimize.setObjectName("actionSource_Optimize")
        self.actionGuide = QtGui.QAction(EditorWindow)
        self.actionGuide.setObjectName("actionGuide")
        self.actionMirror = QtGui.QAction(EditorWindow)
        self.actionMirror.setObjectName("actionMirror")
        self.actionV_Selector = QtGui.QAction(EditorWindow)
        self.actionV_Selector.setObjectName("actionV_Selector")
        self.actionUndo = QtGui.QAction(EditorWindow)
        self.actionUndo.setObjectName("actionUndo")
        self.actionRedo = QtGui.QAction(EditorWindow)
        self.actionRedo.setObjectName("actionRedo")
        self.actionCopy = QtGui.QAction(EditorWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionCut = QtGui.QAction(EditorWindow)
        self.actionCut.setObjectName("actionCut")
        self.actionPaste = QtGui.QAction(EditorWindow)
        self.actionPaste.setObjectName("actionPaste")
        self.actionSelect_All = QtGui.QAction(EditorWindow)
        self.actionSelect_All.setObjectName("actionSelect_All")
        self.actionSave = QtGui.QAction(EditorWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionClose_Instrument_Editor = QtGui.QAction(EditorWindow)
        self.actionClose_Instrument_Editor.setObjectName("actionClose_Instrument_Editor")
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionClose_Instrument_Editor)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionSelect_All)
        self.menuInsert.addAction(self.actionComponent_Browser)
        self.menuInsert.addSeparator()
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuInsert.menuAction())

        self.retranslateUi(EditorWindow)
        QtCore.QMetaObject.connectSlotsByName(EditorWindow)

    def retranslateUi(self, EditorWindow):
        EditorWindow.setWindowTitle(QtGui.QApplication.translate("EditorWindow", "Instrument Editor", None, QtGui.QApplication.UnicodeUTF8))
        self.menuFile.setTitle(QtGui.QApplication.translate("EditorWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
        self.menuEdit.setTitle(QtGui.QApplication.translate("EditorWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
        self.menuView.setTitle(QtGui.QApplication.translate("EditorWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
        self.menuInsert.setTitle(QtGui.QApplication.translate("EditorWindow", "Insert", None, QtGui.QApplication.UnicodeUTF8))
        self.actionComponent_Browser.setText(QtGui.QApplication.translate("EditorWindow", "Component Browser...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCompDummy.setText(QtGui.QApplication.translate("EditorWindow", "component_of_this_category", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSource_Optimize.setText(QtGui.QApplication.translate("EditorWindow", "Source_Optimize...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionGuide.setText(QtGui.QApplication.translate("EditorWindow", "Guide...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionMirror.setText(QtGui.QApplication.translate("EditorWindow", "Mirror...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionV_Selector.setText(QtGui.QApplication.translate("EditorWindow", "V_selector...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionUndo.setText(QtGui.QApplication.translate("EditorWindow", "Undo", None, QtGui.QApplication.UnicodeUTF8))
        self.actionUndo.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+Z", None, QtGui.QApplication.UnicodeUTF8))
        self.actionRedo.setText(QtGui.QApplication.translate("EditorWindow", "Redo", None, QtGui.QApplication.UnicodeUTF8))
        self.actionRedo.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+Shift+Z", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCopy.setText(QtGui.QApplication.translate("EditorWindow", "Copy", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCopy.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+C", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCut.setText(QtGui.QApplication.translate("EditorWindow", "Cut", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCut.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+X", None, QtGui.QApplication.UnicodeUTF8))
        self.actionPaste.setText(QtGui.QApplication.translate("EditorWindow", "Paste", None, QtGui.QApplication.UnicodeUTF8))
        self.actionPaste.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+V", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSelect_All.setText(QtGui.QApplication.translate("EditorWindow", "Select All", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSelect_All.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+A", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSave.setText(QtGui.QApplication.translate("EditorWindow", "Save", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSave.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+S", None, QtGui.QApplication.UnicodeUTF8))
        self.actionClose_Instrument_Editor.setText(QtGui.QApplication.translate("EditorWindow", "Close Instrument Editor", None, QtGui.QApplication.UnicodeUTF8))
        self.actionClose_Instrument_Editor.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+W", None, QtGui.QApplication.UnicodeUTF8))


''' Start simulation dialog widget
Auto-generated view created with QtCreator.
Generate from .ui source with pyside-uic. 
Do not edit.
'''
class Ui_dlgStartSim(object):
    def setupUi(self, dlgStartSim):
        dlgStartSim.setObjectName("dlgStartSim")
        dlgStartSim.resize(504, 386)
        self.verticalLayout_4 = QtGui.QVBoxLayout(dlgStartSim)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout = QtGui.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.gbxGrid = QtGui.QGroupBox(dlgStartSim)
        self.gbxGrid.setObjectName("gbxGrid")
        self.verticalLayout_2 = QtGui.QVBoxLayout(self.gbxGrid)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.gridLayout = QtGui.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.lblGridDummy = QtGui.QLabel(self.gbxGrid)
        self.lblGridDummy.setObjectName("lblGridDummy")
        self.gridLayout.addWidget(self.lblGridDummy, 0, 0, 1, 1)
        self.edtGridDummy2 = QtGui.QLineEdit(self.gbxGrid)
        self.edtGridDummy2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtGridDummy2.setObjectName("edtGridDummy2")
        self.gridLayout.addWidget(self.edtGridDummy2, 0, 3, 1, 1)
        self.lblGridDummy2 = QtGui.QLabel(self.gbxGrid)
        self.lblGridDummy2.setObjectName("lblGridDummy2")
        self.gridLayout.addWidget(self.lblGridDummy2, 0, 2, 1, 1)
        self.lblGridDummy3 = QtGui.QLabel(self.gbxGrid)
        self.lblGridDummy3.setObjectName("lblGridDummy3")
        self.gridLayout.addWidget(self.lblGridDummy3, 0, 4, 1, 1)
        self.edtGridDummy = QtGui.QLineEdit(self.gbxGrid)
        self.edtGridDummy.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtGridDummy.setObjectName("edtGridDummy")
        self.gridLayout.addWidget(self.edtGridDummy, 0, 1, 1, 1)
        self.edtGridDummy3 = QtGui.QLineEdit(self.gbxGrid)
        self.edtGridDummy3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtGridDummy3.setObjectName("edtGridDummy3")
        self.gridLayout.addWidget(self.edtGridDummy3, 0, 5, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout)
        self.verticalLayout.addWidget(self.gbxGrid)
        self.gbxSim = QtGui.QGroupBox(dlgStartSim)
        self.gbxSim.setObjectName("gbxSim")
        self.verticalLayout_3 = QtGui.QVBoxLayout(self.gbxSim)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.gridLayout_2 = QtGui.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.cbxSimTrace = QtGui.QComboBox(self.gbxSim)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.MinimumExpanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cbxSimTrace.sizePolicy().hasHeightForWidth())
        self.cbxSimTrace.setSizePolicy(sizePolicy)
        self.cbxSimTrace.setObjectName("cbxSimTrace")
        self.cbxSimTrace.addItem("")
        self.cbxSimTrace.addItem("")
        self.gridLayout_2.addWidget(self.cbxSimTrace, 1, 0, 1, 1)
        self.cbxClustering = QtGui.QComboBox(self.gbxSim)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.MinimumExpanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cbxClustering.sizePolicy().hasHeightForWidth())
        self.cbxClustering.setSizePolicy(sizePolicy)
        self.cbxClustering.setObjectName("cbxClustering")
        self.cbxClustering.addItem("")
        self.cbxClustering.addItem("")
        self.cbxClustering.addItem("")
        self.gridLayout_2.addWidget(self.cbxClustering, 6, 0, 1, 1)
        self.edtNeutronCnt = QtGui.QLineEdit(self.gbxSim)
        self.edtNeutronCnt.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtNeutronCnt.setObjectName("edtNeutronCnt")
        self.gridLayout_2.addWidget(self.edtNeutronCnt, 1, 2, 1, 1)
        self.label_3 = QtGui.QLabel(self.gbxSim)
        self.label_3.setObjectName("label_3")
        self.gridLayout_2.addWidget(self.label_3, 6, 1, 1, 1)
        self.lineEdit = QtGui.QLineEdit(self.gbxSim)
        self.lineEdit.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_2.addWidget(self.lineEdit, 4, 2, 1, 1)
        self.label_5 = QtGui.QLabel(self.gbxSim)
        self.label_5.setObjectName("label_5")
        self.gridLayout_2.addWidget(self.label_5, 4, 1, 1, 1)
        self.label = QtGui.QLabel(self.gbxSim)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 2, 1, 1, 1)
        self.label_4 = QtGui.QLabel(self.gbxSim)
        self.label_4.setObjectName("label_4")
        self.gridLayout_2.addWidget(self.label_4, 1, 1, 1, 1)
        self.edtSteps = QtGui.QLineEdit(self.gbxSim)
        self.edtSteps.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtSteps.setObjectName("edtSteps")
        self.gridLayout_2.addWidget(self.edtSteps, 2, 2, 1, 1)
        self.checkBox = QtGui.QCheckBox(self.gbxSim)
        self.checkBox.setObjectName("checkBox")
        self.gridLayout_2.addWidget(self.checkBox, 3, 1, 1, 1)
        self.edtNodes = QtGui.QLineEdit(self.gbxSim)
        self.edtNodes.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtNodes.setObjectName("edtNodes")
        self.gridLayout_2.addWidget(self.edtNodes, 6, 2, 1, 1)
        self.verticalLayout_3.addLayout(self.gridLayout_2)
        self.verticalLayout.addWidget(self.gbxSim)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout_3 = QtGui.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.btnStart = QtGui.QPushButton(dlgStartSim)
        self.btnStart.setDefault(True)
        self.btnStart.setObjectName("btnStart")
        self.horizontalLayout_3.addWidget(self.btnStart)
        spacerItem1 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.btnCancel = QtGui.QPushButton(dlgStartSim)
        self.btnCancel.setObjectName("btnCancel")
        self.horizontalLayout_3.addWidget(self.btnCancel)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.verticalLayout_4.addLayout(self.verticalLayout)

        self.retranslateUi(dlgStartSim)
        QtCore.QMetaObject.connectSlotsByName(dlgStartSim)

    def retranslateUi(self, dlgStartSim):
        dlgStartSim.setWindowTitle(QtGui.QApplication.translate("dlgStartSim", "Start simulation", None, QtGui.QApplication.UnicodeUTF8))
        self.gbxGrid.setTitle(QtGui.QApplication.translate("dlgStartSim", "Instrument parameters (D=floating point, I=integer, S=string):", None, QtGui.QApplication.UnicodeUTF8))
        self.lblGridDummy.setText(QtGui.QApplication.translate("dlgStartSim", "lambda (D):", None, QtGui.QApplication.UnicodeUTF8))
        self.lblGridDummy2.setText(QtGui.QApplication.translate("dlgStartSim", "R (D):", None, QtGui.QApplication.UnicodeUTF8))
        self.lblGridDummy3.setText(QtGui.QApplication.translate("dlgStartSim", "R_curve (D):", None, QtGui.QApplication.UnicodeUTF8))
        self.gbxSim.setTitle(QtGui.QApplication.translate("dlgStartSim", "Simulation:", None, QtGui.QApplication.UnicodeUTF8))
        self.cbxSimTrace.setItemText(0, QtGui.QApplication.translate("dlgStartSim", "Simulation", None, QtGui.QApplication.UnicodeUTF8))
        self.cbxSimTrace.setItemText(1, QtGui.QApplication.translate("dlgStartSim", "Trace", None, QtGui.QApplication.UnicodeUTF8))
        self.cbxClustering.setItemText(0, QtGui.QApplication.translate("dlgStartSim", "No clustering", None, QtGui.QApplication.UnicodeUTF8))
        self.cbxClustering.setItemText(1, QtGui.QApplication.translate("dlgStartSim", "MPI clustering", None, QtGui.QApplication.UnicodeUTF8))
        self.cbxClustering.setItemText(2, QtGui.QApplication.translate("dlgStartSim", "SSH clustering", None, QtGui.QApplication.UnicodeUTF8))
        self.edtNeutronCnt.setText(QtGui.QApplication.translate("dlgStartSim", "1000000", None, QtGui.QApplication.UnicodeUTF8))
        self.edtNodes.setText(mccode_config.compilation["MPINODES"])
        self.label_3.setText(QtGui.QApplication.translate("dlgStartSim", "# nodes:", None, QtGui.QApplication.UnicodeUTF8))
        self.label_5.setText(QtGui.QApplication.translate("dlgStartSim", "Random seed:", None, QtGui.QApplication.UnicodeUTF8))
        self.label.setText(QtGui.QApplication.translate("dlgStartSim", "Steps:", None, QtGui.QApplication.UnicodeUTF8))
        self.label_4.setText(QtGui.QApplication.translate("dlgStartSim", "Neutron count:", None, QtGui.QApplication.UnicodeUTF8))
        self.edtSteps.setText(QtGui.QApplication.translate("dlgStartSim", "0", None, QtGui.QApplication.UnicodeUTF8))
        self.checkBox.setText(QtGui.QApplication.translate("dlgStartSim", "Gravity", None, QtGui.QApplication.UnicodeUTF8))
        self.btnStart.setText(QtGui.QApplication.translate("dlgStartSim", "Start", None, QtGui.QApplication.UnicodeUTF8))
        self.btnCancel.setText(QtGui.QApplication.translate("dlgStartSim", "Cancel", None, QtGui.QApplication.UnicodeUTF8))


''' Insert component dialog widget
Auto-generated view created with QtCreator.
Generate from .ui source with pyside-uic. 
Do not edit.
'''
class Ui_dlgInsertComponent(object):
    def setupUi(self, dlgInsertComponent):
        dlgInsertComponent.setObjectName("dlgInsertComponent")
        dlgInsertComponent.resize(983, 588)
        self.verticalLayout_2 = QtGui.QVBoxLayout(dlgInsertComponent)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.hlayoutNonButtons = QtGui.QHBoxLayout()
        self.hlayoutNonButtons.setObjectName("hlayoutNonButtons")
        self.vlayoutDescription = QtGui.QVBoxLayout()
        self.vlayoutDescription.setObjectName("vlayoutDescription")
        self.scrlaDescription = QtGui.QScrollArea(dlgInsertComponent)
        self.scrlaDescription.setMinimumSize(QtCore.QSize(424, 0))
        self.scrlaDescription.setWidgetResizable(True)
        self.scrlaDescription.setObjectName("scrlaDescription")
        self.vlayoutscrlaDescription = QtGui.QWidget()
        self.vlayoutscrlaDescription.setGeometry(QtCore.QRect(0, 0, 422, 529))
        self.vlayoutscrlaDescription.setObjectName("vlayoutscrlaDescription")
        self.verticalLayout_4 = QtGui.QVBoxLayout(self.vlayoutscrlaDescription)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.lblDescr = QtGui.QLabel(self.vlayoutscrlaDescription)
        self.lblDescr.setWordWrap(True)
        self.lblDescr.setObjectName("lblDescr")
        self.verticalLayout_4.addWidget(self.lblDescr)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem)
        self.scrlaDescription.setWidget(self.vlayoutscrlaDescription)
        self.vlayoutDescription.addWidget(self.scrlaDescription)
        self.hlayoutNonButtons.addLayout(self.vlayoutDescription)
        self.vlayoutParameters = QtGui.QVBoxLayout()
        self.vlayoutParameters.setObjectName("vlayoutParameters")
        self.gridInstanceName = QtGui.QGridLayout()
        self.gridInstanceName.setObjectName("gridInstanceName")
        self.edtInstanceName = QtGui.QLineEdit(dlgInsertComponent)
        self.edtInstanceName.setObjectName("edtInstanceName")
        self.gridInstanceName.addWidget(self.edtInstanceName, 0, 0, 1, 1)
        self.vlayoutParameters.addLayout(self.gridInstanceName)
        self.scrlaParameters = QtGui.QScrollArea(dlgInsertComponent)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrlaParameters.sizePolicy().hasHeightForWidth())
        self.scrlaParameters.setSizePolicy(sizePolicy)
        self.scrlaParameters.setWidgetResizable(True)
        self.scrlaParameters.setObjectName("scrlaParameters")
        self.vlayoutscrlaParameters = QtGui.QWidget()
        self.vlayoutscrlaParameters.setGeometry(QtCore.QRect(0, 0, 527, 426))
        self.vlayoutscrlaParameters.setObjectName("vlayoutscrlaParameters")
        self.verticalLayout = QtGui.QVBoxLayout(self.vlayoutscrlaParameters)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridParameters = QtGui.QGridLayout()
        self.gridParameters.setObjectName("gridParameters")
        self.edtParValDummy = QtGui.QLineEdit(self.vlayoutscrlaParameters)
        self.edtParValDummy.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtParValDummy.setObjectName("edtParValDummy")
        self.gridParameters.addWidget(self.edtParValDummy, 0, 1, 1, 1)
        self.lblParDummy = QtGui.QLabel(self.vlayoutscrlaParameters)
        self.lblParDummy.setObjectName("lblParDummy")
        self.gridParameters.addWidget(self.lblParDummy, 0, 0, 1, 1)
        self.lblParDocstringDummy = QtGui.QLabel(self.vlayoutscrlaParameters)
        self.lblParDocstringDummy.setObjectName("lblParDocstringDummy")
        self.gridParameters.addWidget(self.lblParDocstringDummy, 0, 2, 1, 1)
        self.verticalLayout.addLayout(self.gridParameters)
        spacerItem1 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem1)
        self.scrlaParameters.setWidget(self.vlayoutscrlaParameters)
        self.vlayoutParameters.addWidget(self.scrlaParameters)
        self.gridAtRotated = QtGui.QGridLayout()
        self.gridAtRotated.setObjectName("gridAtRotated")
        self.label_5 = QtGui.QLabel(dlgInsertComponent)
        self.label_5.setObjectName("label_5")
        self.gridAtRotated.addWidget(self.label_5, 1, 7, 1, 1)
        self.label_7 = QtGui.QLabel(dlgInsertComponent)
        self.label_7.setObjectName("label_7")
        self.gridAtRotated.addWidget(self.label_7, 0, 3, 1, 1)
        self.label_9 = QtGui.QLabel(dlgInsertComponent)
        self.label_9.setObjectName("label_9")
        self.gridAtRotated.addWidget(self.label_9, 0, 7, 1, 1)
        self.edtAtRel = QtGui.QLineEdit(dlgInsertComponent)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.MinimumExpanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.edtAtRel.sizePolicy().hasHeightForWidth())
        self.edtAtRel.setSizePolicy(sizePolicy)
        self.edtAtRel.setMinimumSize(QtCore.QSize(0, 0))
        self.edtAtRel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.edtAtRel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.edtAtRel.setObjectName("edtAtRel")
        self.gridAtRotated.addWidget(self.edtAtRel, 0, 8, 1, 1)
        self.label_6 = QtGui.QLabel(dlgInsertComponent)
        self.label_6.setObjectName("label_6")
        self.gridAtRotated.addWidget(self.label_6, 0, 0, 1, 1)
        self.edtAtY = QtGui.QLineEdit(dlgInsertComponent)
        self.edtAtY.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.edtAtY.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtAtY.setObjectName("edtAtY")
        self.gridAtRotated.addWidget(self.edtAtY, 0, 4, 1, 1)
        self.edtAtZ = QtGui.QLineEdit(dlgInsertComponent)
        self.edtAtZ.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.edtAtZ.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtAtZ.setObjectName("edtAtZ")
        self.gridAtRotated.addWidget(self.edtAtZ, 0, 6, 1, 1)
        self.label_8 = QtGui.QLabel(dlgInsertComponent)
        self.label_8.setObjectName("label_8")
        self.gridAtRotated.addWidget(self.label_8, 0, 5, 1, 1)
        self.edtAtX = QtGui.QLineEdit(dlgInsertComponent)
        self.edtAtX.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.edtAtX.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtAtX.setObjectName("edtAtX")
        self.gridAtRotated.addWidget(self.edtAtX, 0, 2, 1, 1)
        self.label_2 = QtGui.QLabel(dlgInsertComponent)
        self.label_2.setObjectName("label_2")
        self.gridAtRotated.addWidget(self.label_2, 1, 0, 1, 1)
        self.edtRotX = QtGui.QLineEdit(dlgInsertComponent)
        self.edtRotX.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.edtRotX.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtRotX.setObjectName("edtRotX")
        self.gridAtRotated.addWidget(self.edtRotX, 1, 2, 1, 1)
        self.edtRotY = QtGui.QLineEdit(dlgInsertComponent)
        self.edtRotY.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.edtRotY.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtRotY.setObjectName("edtRotY")
        self.gridAtRotated.addWidget(self.edtRotY, 1, 4, 1, 1)
        self.edtRotZ = QtGui.QLineEdit(dlgInsertComponent)
        self.edtRotZ.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.edtRotZ.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtRotZ.setObjectName("edtRotZ")
        self.gridAtRotated.addWidget(self.edtRotZ, 1, 6, 1, 1)
        self.edtRotRel = QtGui.QLineEdit(dlgInsertComponent)
        self.edtRotRel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.edtRotRel.setObjectName("edtRotRel")
        self.gridAtRotated.addWidget(self.edtRotRel, 1, 8, 1, 1)
        self.label_4 = QtGui.QLabel(dlgInsertComponent)
        self.label_4.setObjectName("label_4")
        self.gridAtRotated.addWidget(self.label_4, 1, 5, 1, 1)
        self.label_3 = QtGui.QLabel(dlgInsertComponent)
        self.label_3.setObjectName("label_3")
        self.gridAtRotated.addWidget(self.label_3, 1, 3, 1, 1)
        self.label_13 = QtGui.QLabel(dlgInsertComponent)
        self.label_13.setObjectName("label_13")
        self.gridAtRotated.addWidget(self.label_13, 0, 1, 1, 1)
        self.label_15 = QtGui.QLabel(dlgInsertComponent)
        self.label_15.setObjectName("label_15")
        self.gridAtRotated.addWidget(self.label_15, 1, 1, 1, 1)
        self.vlayoutParameters.addLayout(self.gridAtRotated)
        self.hlayoutNonButtons.addLayout(self.vlayoutParameters)
        self.verticalLayout_2.addLayout(self.hlayoutNonButtons)
        self.hlayoutButtons = QtGui.QHBoxLayout()
        self.hlayoutButtons.setObjectName("hlayoutButtons")
        spacerItem2 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.hlayoutButtons.addItem(spacerItem2)
        self.btnInsert = QtGui.QPushButton(dlgInsertComponent)
        self.btnInsert.setDefault(True)
        self.btnInsert.setObjectName("btnInsert")
        self.hlayoutButtons.addWidget(self.btnInsert)
        self.btnCancel = QtGui.QPushButton(dlgInsertComponent)
        self.btnCancel.setObjectName("btnCancel")
        self.hlayoutButtons.addWidget(self.btnCancel)
        self.verticalLayout_2.addLayout(self.hlayoutButtons)

        self.retranslateUi(dlgInsertComponent)
        QtCore.QMetaObject.connectSlotsByName(dlgInsertComponent)
        dlgInsertComponent.setTabOrder(self.edtInstanceName, self.btnInsert)
        dlgInsertComponent.setTabOrder(self.btnInsert, self.edtParValDummy)
        dlgInsertComponent.setTabOrder(self.edtParValDummy, self.edtAtX)
        dlgInsertComponent.setTabOrder(self.edtAtX, self.edtAtY)
        dlgInsertComponent.setTabOrder(self.edtAtY, self.edtAtZ)
        dlgInsertComponent.setTabOrder(self.edtAtZ, self.edtAtRel)
        dlgInsertComponent.setTabOrder(self.edtAtRel, self.edtRotX)
        dlgInsertComponent.setTabOrder(self.edtRotX, self.edtRotY)
        dlgInsertComponent.setTabOrder(self.edtRotY, self.edtRotZ)
        dlgInsertComponent.setTabOrder(self.edtRotZ, self.edtRotRel)
        dlgInsertComponent.setTabOrder(self.edtRotRel, self.btnCancel)
        dlgInsertComponent.setTabOrder(self.btnCancel, self.scrlaDescription)
        dlgInsertComponent.setTabOrder(self.scrlaDescription, self.scrlaParameters)

    def retranslateUi(self, dlgInsertComponent):
        dlgInsertComponent.setWindowTitle(QtGui.QApplication.translate("dlgInsertComponent", "Insert Component", None, QtGui.QApplication.UnicodeUTF8))
        self.lblDescr.setText(QtGui.QApplication.translate("dlgInsertComponent", "lblDescr", None, QtGui.QApplication.UnicodeUTF8))
        self.edtInstanceName.setToolTip(QtGui.QApplication.translate("dlgInsertComponent", "Instance name", None, QtGui.QApplication.UnicodeUTF8))
        self.edtInstanceName.setText(QtGui.QApplication.translate("dlgInsertComponent", "<instance name>", None, QtGui.QApplication.UnicodeUTF8))
        self.edtParValDummy.setText(QtGui.QApplication.translate("dlgInsertComponent", "<value>", None, QtGui.QApplication.UnicodeUTF8))
        self.lblParDummy.setText(QtGui.QApplication.translate("dlgInsertComponent", "<par>", None, QtGui.QApplication.UnicodeUTF8))
        self.lblParDocstringDummy.setText(QtGui.QApplication.translate("dlgInsertComponent", "<docstring>", None, QtGui.QApplication.UnicodeUTF8))
        self.label_5.setText(QtGui.QApplication.translate("dlgInsertComponent", ") RELATIVE ", None, QtGui.QApplication.UnicodeUTF8))
        self.label_7.setText(QtGui.QApplication.translate("dlgInsertComponent", ",", None, QtGui.QApplication.UnicodeUTF8))
        self.label_9.setText(QtGui.QApplication.translate("dlgInsertComponent", ") RELATIVE ", None, QtGui.QApplication.UnicodeUTF8))
        self.edtAtRel.setText(QtGui.QApplication.translate("dlgInsertComponent", "PREVIOUS", None, QtGui.QApplication.UnicodeUTF8))
        self.label_6.setText(QtGui.QApplication.translate("dlgInsertComponent", "AT", None, QtGui.QApplication.UnicodeUTF8))
        self.edtAtY.setToolTip(QtGui.QApplication.translate("dlgInsertComponent", "y", None, QtGui.QApplication.UnicodeUTF8))
        self.edtAtY.setText(QtGui.QApplication.translate("dlgInsertComponent", "0", None, QtGui.QApplication.UnicodeUTF8))
        self.edtAtZ.setToolTip(QtGui.QApplication.translate("dlgInsertComponent", "z", None, QtGui.QApplication.UnicodeUTF8))
        self.edtAtZ.setText(QtGui.QApplication.translate("dlgInsertComponent", "0", None, QtGui.QApplication.UnicodeUTF8))
        self.label_8.setText(QtGui.QApplication.translate("dlgInsertComponent", ",", None, QtGui.QApplication.UnicodeUTF8))
        self.edtAtX.setToolTip(QtGui.QApplication.translate("dlgInsertComponent", "x", None, QtGui.QApplication.UnicodeUTF8))
        self.edtAtX.setText(QtGui.QApplication.translate("dlgInsertComponent", "0", None, QtGui.QApplication.UnicodeUTF8))
        self.label_2.setText(QtGui.QApplication.translate("dlgInsertComponent", "ROTATED", None, QtGui.QApplication.UnicodeUTF8))
        self.edtRotX.setToolTip(QtGui.QApplication.translate("dlgInsertComponent", "x-rot", None, QtGui.QApplication.UnicodeUTF8))
        self.edtRotX.setText(QtGui.QApplication.translate("dlgInsertComponent", "0", None, QtGui.QApplication.UnicodeUTF8))
        self.edtRotY.setToolTip(QtGui.QApplication.translate("dlgInsertComponent", "y-rot", None, QtGui.QApplication.UnicodeUTF8))
        self.edtRotY.setText(QtGui.QApplication.translate("dlgInsertComponent", "0", None, QtGui.QApplication.UnicodeUTF8))
        self.edtRotZ.setToolTip(QtGui.QApplication.translate("dlgInsertComponent", "z-rot", None, QtGui.QApplication.UnicodeUTF8))
        self.edtRotZ.setText(QtGui.QApplication.translate("dlgInsertComponent", "0", None, QtGui.QApplication.UnicodeUTF8))
        self.edtRotRel.setText(QtGui.QApplication.translate("dlgInsertComponent", "PREVIOUS", None, QtGui.QApplication.UnicodeUTF8))
        self.label_4.setText(QtGui.QApplication.translate("dlgInsertComponent", ",", None, QtGui.QApplication.UnicodeUTF8))
        self.label_3.setText(QtGui.QApplication.translate("dlgInsertComponent", ",", None, QtGui.QApplication.UnicodeUTF8))
        self.label_13.setText(QtGui.QApplication.translate("dlgInsertComponent", "(", None, QtGui.QApplication.UnicodeUTF8))
        self.label_15.setText(QtGui.QApplication.translate("dlgInsertComponent", "(", None, QtGui.QApplication.UnicodeUTF8))
        self.btnInsert.setToolTip(QtGui.QApplication.translate("dlgInsertComponent", "Insert component into instrument definition", None, QtGui.QApplication.UnicodeUTF8))
        self.btnInsert.setText(QtGui.QApplication.translate("dlgInsertComponent", "Insert", None, QtGui.QApplication.UnicodeUTF8))
        self.btnCancel.setText(QtGui.QApplication.translate("dlgInsertComponent", "Cancel", None, QtGui.QApplication.UnicodeUTF8))


''' mcgui configuration dialog widget
Auto-generated view created with QtCreator.
Generate from .ui source with pyside-uic. 
Do not edit.
'''
class Ui_dlgConfig(object):
    def setupUi(self, dlgConfig):
        dlgConfig.setObjectName("dlgConfig")
        dlgConfig.resize(328, 499)
        dlgConfig.setModal(True)
        self.verticalLayout = QtGui.QVBoxLayout(dlgConfig)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridApps = QtGui.QGridLayout()
        self.gridApps.setObjectName("gridApps")
        self.lblMcplot = QtGui.QLabel(dlgConfig)
        self.lblMcplot.setObjectName("lblMcplot")
        self.gridApps.addWidget(self.lblMcplot, 2, 0, 1, 1)
        self.lblMcdisplay = QtGui.QLabel(dlgConfig)
        self.lblMcdisplay.setObjectName("lblMcdisplay")
        self.gridApps.addWidget(self.lblMcdisplay, 4, 0, 1, 1)
        self.cbxMcPlot = QtGui.QComboBox(dlgConfig)
        self.cbxMcPlot.setObjectName("cbxMcPlot")
        self.gridApps.addWidget(self.cbxMcPlot, 3, 0, 1, 1)
        self.cbxMcrun = QtGui.QComboBox(dlgConfig)
        self.cbxMcrun.setObjectName("cbxMcrun")
        self.gridApps.addWidget(self.cbxMcrun, 1, 0, 1, 1)
        self.lblMcrun = QtGui.QLabel(dlgConfig)
        self.lblMcrun.setObjectName("lblMcrun")
        self.gridApps.addWidget(self.lblMcrun, 0, 0, 1, 1)
        self.cbxMcdisplay = QtGui.QComboBox(dlgConfig)
        self.cbxMcdisplay.setObjectName("cbxMcdisplay")
        self.gridApps.addWidget(self.cbxMcdisplay, 5, 0, 1, 1)
        self.verticalLayout.addLayout(self.gridApps)
        self.gridFlags = QtGui.QGridLayout()
        self.gridFlags.setObjectName("gridFlags")
        self.lblCflags = QtGui.QLabel(dlgConfig)
        self.lblCflags.setObjectName("lblCflags")
        self.gridFlags.addWidget(self.lblCflags, 2, 0, 1, 1)
        self.lblMpirun = QtGui.QLabel(dlgConfig)
        self.lblMpirun.setObjectName("lblMpirun")
        self.gridFlags.addWidget(self.lblMpirun, 6, 0, 1, 1)
        self.edtCC = QtGui.QLineEdit(dlgConfig)
        self.edtCC.setObjectName("edtCC")
        self.gridFlags.addWidget(self.edtCC, 1, 0, 1, 1)
        self.lblNumnodes = QtGui.QLabel(dlgConfig)
        self.lblNumnodes.setObjectName("lblNumnodes")
        self.gridFlags.addWidget(self.lblNumnodes, 10, 0, 1, 1)
        self.lblCc = QtGui.QLabel(dlgConfig)
        self.lblCc.setObjectName("lblCc")
        self.gridFlags.addWidget(self.lblCc, 0, 0, 1, 1)
        self.edtMPIrun = QtGui.QLineEdit(dlgConfig)
        self.edtMPIrun.setObjectName("edtMPIrun")
        self.gridFlags.addWidget(self.edtMPIrun, 7, 0, 1, 1)
        self.edtCflags = QtGui.QLineEdit(dlgConfig)
        self.edtCflags.setObjectName("edtCflags")
        self.gridFlags.addWidget(self.edtCflags, 3, 0, 1, 1)
        self.edtNumNodes = QtGui.QLineEdit(dlgConfig)
        self.edtNumNodes.setObjectName("edtNumNodes")
        self.gridFlags.addWidget(self.edtNumNodes, 11, 0, 1, 1)
        self.lblMpicc = QtGui.QLabel(dlgConfig)
        self.lblMpicc.setObjectName("lblMpicc")
        self.gridFlags.addWidget(self.lblMpicc, 4, 0, 1, 1)
        self.edtMpicc = QtGui.QLineEdit(dlgConfig)
        self.edtMpicc.setObjectName("edtMpicc")
        self.gridFlags.addWidget(self.edtMpicc, 5, 0, 1, 1)
        self.verticalLayout.addLayout(self.gridFlags)
        self.hlayoutButtons = QtGui.QHBoxLayout()
        self.hlayoutButtons.setObjectName("hlayoutButtons")
        self.btnOk = QtGui.QPushButton(dlgConfig)
        self.btnOk.setDefault(True)
        self.btnOk.setObjectName("btnOk")
        self.hlayoutButtons.addWidget(self.btnOk)
        self.btnSave = QtGui.QPushButton(dlgConfig)
        self.btnSave.setDefault(False)
        self.btnSave.setObjectName("btnSave")
        self.hlayoutButtons.addWidget(self.btnSave)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.hlayoutButtons.addItem(spacerItem)
        self.btnCancel = QtGui.QPushButton(dlgConfig)
        self.btnCancel.setObjectName("btnCancel")
        self.hlayoutButtons.addWidget(self.btnCancel)
        self.verticalLayout.addLayout(self.hlayoutButtons)

        self.retranslateUi(dlgConfig)
        QtCore.QMetaObject.connectSlotsByName(dlgConfig)
        dlgConfig.setTabOrder(self.cbxMcrun, self.cbxMcPlot)
        dlgConfig.setTabOrder(self.cbxMcPlot, self.cbxMcdisplay)
        dlgConfig.setTabOrder(self.cbxMcdisplay, self.edtCC)
        dlgConfig.setTabOrder(self.edtCC, self.edtCflags)
        dlgConfig.setTabOrder(self.edtCflags, self.edtMpicc)
        dlgConfig.setTabOrder(self.edtMpicc, self.edtMPIrun)
        dlgConfig.setTabOrder(self.edtMPIrun, self.edtNumNodes)
        dlgConfig.setTabOrder(self.edtNumNodes, self.btnOk)
        dlgConfig.setTabOrder(self.btnOk, self.btnSave)
        dlgConfig.setTabOrder(self.btnSave, self.btnCancel)

    def retranslateUi(self, dlgConfig):
        dlgConfig.setWindowTitle(QtGui.QApplication.translate("dlgConfig", "mccode-py configuration", None, QtGui.QApplication.UnicodeUTF8))
        self.lblMcplot.setText(QtGui.QApplication.translate("dlgConfig", "mcplot", None, QtGui.QApplication.UnicodeUTF8))
        self.lblMcdisplay.setText(QtGui.QApplication.translate("dlgConfig", "mcdisplay", None, QtGui.QApplication.UnicodeUTF8))
        self.lblMcrun.setText(QtGui.QApplication.translate("dlgConfig", "mcrun", None, QtGui.QApplication.UnicodeUTF8))
        self.lblCflags.setText(QtGui.QApplication.translate("dlgConfig", "C flags", None, QtGui.QApplication.UnicodeUTF8))
        self.lblMpirun.setText(QtGui.QApplication.translate("dlgConfig", "MPIrun", None, QtGui.QApplication.UnicodeUTF8))
        self.lblNumnodes.setText(QtGui.QApplication.translate("dlgConfig", "# nodes", None, QtGui.QApplication.UnicodeUTF8))
        self.lblCc.setText(QtGui.QApplication.translate("dlgConfig", "cc", None, QtGui.QApplication.UnicodeUTF8))
        self.lblMpicc.setText(QtGui.QApplication.translate("dlgConfig", "MPIcc", None, QtGui.QApplication.UnicodeUTF8))
        self.btnOk.setToolTip(QtGui.QApplication.translate("dlgConfig", "Keep for this session", None, QtGui.QApplication.UnicodeUTF8))
        self.btnOk.setText(QtGui.QApplication.translate("dlgConfig", "Ok", None, QtGui.QApplication.UnicodeUTF8))
        self.btnSave.setToolTip(QtGui.QApplication.translate("dlgConfig", "Keep & save configuration to disk", None, QtGui.QApplication.UnicodeUTF8))
        self.btnSave.setText(QtGui.QApplication.translate("dlgConfig", "Save", None, QtGui.QApplication.UnicodeUTF8))
        self.btnCancel.setText(QtGui.QApplication.translate("dlgConfig", "Cancel", None, QtGui.QApplication.UnicodeUTF8))

