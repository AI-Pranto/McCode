/*******************************************************************************
*
* Component: SANS_sasview_model
*
* %I
* Written by: Jakob Garde (based on Sans_spheres)
* Date: 22.06.2015
* Version: 0.2
* Origin: DTU
* Release: n/a
*
* This sample component applies sasview models as scattering kernels.
* NOTE: add the flag "-std=c99" to "C flags" in the mcgui or mcgui-py config.
*
* %D
* Shape:        - A filled box with dimensions xwidth, yheight and zdepth. 
*               - A cylinder with dimensions radius and yheight.
*               - A filled sphere given by radius. 
* These parameters are mutually exclusive.
*
* Example:      SANS_sasview_model(model_index=1, model_pars={100.0, 1e-3, 0.6, 0.50}, 
*                                  xwidth=0.01, yheight=0.01, zdepth=0.005)
* 
* %P
* Definition parameters:
* 
* model_index:  Index of sasview model, according to the autogenerated list below.
*               The corresponding sasview model .c file becomes hardcoded into the instrument
*               at instrument compile time. This means that this parameter can not become an
*               instrument parameter, in which case it the value 0 will always be assigned 
*               to it.
*
*               Models:
*                0 - None 
*                1 - sas_core_shell_cylinder32_7dsS5z.c (core_sld, shell_sld, solvent_sld, radius, thickness, length) 
*                2 - sas_lamellarCailleHG32_YMPxp7.c    (tail_length, head_length, Nlayers, dd, Cp, tail_sld, head_sld, solvent_sld) 
*                3 - sas_lamellar32_6RVlIH.c            (sld, solvent_sld, thickness) 
*                4 - sas_parallelepiped32_4bSc95.c      (sld, solvent_sld, a_side, b_side, c_side) 
*                5 - sas_bcc_paracrystal32_m6mbhn.c     (dnn, d_factor, radius, sld, solvent_sld) 
*                6 - sas_lamellarPC32_uZ9el7.c          (th, Nlayers, davg, pd, sld, solvent_sld) 
*                7 - sas_barbell32_kbqWfA.c             (sld, solvent_sld, bell_radius, radius, length) 
*                8 - sas_sphere32_MsCEvQ.c              (sld, solvent_sld, radius) 
*                9 - sas_bcc_paracrystal32_qJBt8P.c     (dnn, d_factor, radius, sld, solvent_sld) 
*               10 - sas_fcc_paracrystal32_XguHmt.c     (dnn, d_factor, radius, sld, solvent_sld) 
*               11 - sas_barbell32_0zkew9.c             (sld, solvent_sld, bell_radius, radius, length) 
*               12 - sas_capped_cylinder32_gnYw8c.c     (sld, solvent_sld, radius, cap_radius, length) 
*               13 - sas_triaxial_ellipsoid32_7ZHc5D.c  (sld, solvent_sld, req_minor, req_major, rpolar) 
*               14 - sas_cylinder32_VxZ4PD.c            (sld, solvent_sld, radius, length) 
*               15 - sas_HayterMSAsq32_J3F_Y2.c         (effect_radius, zz, VolFrac, Temp, csalt, dialec) 
*               16 - sas_cylinder32_W1213X.c            (sld, solvent_sld, radius, length) 
*               17 - sas_bcc_paracrystal32_IffCrP.c     (dnn, d_factor, radius, sld, solvent_sld) 
*               18 - sas_HayterMSAsq32_zO1ror.c         (effect_radius, zz, VolFrac, Temp, csalt, dialec) 
*               19 - sas_lamellarPS32_hjLemS.c          (del, Nlayers, dd, Cp, sld, solvent_sld) 
*               20 - sas_sphere32_EK1MLR.c              (sld, solvent_sld, radius) 
*               21 - sas_hardsphere32_9U9Ub7.c          (effect_radius, volfraction) 
*               22 - sas_gaussian_peak32_yZtN6R.c       (q0, sigma) 
*               23 - sas_ellipsoid32_fTHLZo.c           (sld, solvent_sld, rpolar, requatorial) 
*               24 - sas_stickyhardsphere32_qzzAA4.c    (effect_radius, volfraction, perturb, stickiness) 
*               25 - sas_sphere32_H4n7Yt.c              (sld, solvent_sld, radius) 
*               26 - sas_dab32_5OZC_6.c                 (length) 
* 
* model_pars:   The sasview model parameters. These must be ordered correctly wrt. the sasview 
*               documentation, and be called on the form (ex.): model_pars={1.0, 2.0, 3.0, ...}
*               in the instrument file.
*
* Input parameters:
*
* radius:       Outer radius of sample in (x,z) plane for cylinder/sphere [m]
* xwidth:       horiz. dimension of sample, as a width (m)
* yheight:      vert . dimension of sample, as a height for cylinder/box (m)
* zdepth:       depth of sample (m)
* target_index: Relative index of component to focus at, e.g. next is +1 [1]
* focus_xw:     horiz. dimension of a rectangular area [m]
* focus_yh:     vert.  dimension of a rectangular area [m]
* focus_aw:     horiz. angular dimension of a rectangular area [deg]
* focus_ah:     vert.  angular dimension of a rectangular area [deg]
* focus_r:      Detector (disk-shaped) radius (m)
*
* Optional parameters:
* target_x:     -\
* target_y:      3- relative focus target position [m]
* target_z:     -/
*
* Variables calculated in the component:
*
* my_s:         Attenuation factor due to scattering (m^-1)
* my_a:         Attenuation factor due to absorbtion (m^-1)
*
* %Link
* http://www.sasview.org/sasview/user/models/model_functions.html
* 
* %E
*******************************************************************************/

DEFINE COMPONENT SANS_sasview_model

DEFINITION PARAMETERS (
    int model_index=0,
    model_pars/*={1.0, 2.0, 3.0, 4.0}*/)

SETTING PARAMETERS (
    xwidth=0, 
    yheight=0, 
    zdepth=0, 
    radius=0, 
    target_x=0, 
    target_y=0, 
    target_z=6, 
    int target_index=0, 
    focus_xw=0, 
    focus_yh=0, 
    focus_aw=0, 
    focus_ah=0, 
    focus_r=0)

OUTPUT PARAMETERS (
    my_s_v2, 
    my_a_v, 
    shape)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */ 

DECLARE
%{
  // include the appropriate sasview model file
  // AUTOGEN_A
  #if model_index == 1 
    #include "SANS_sasview_model_files/sas_core_shell_cylinder32_7dsS5z.c" 
  #endif 
  #if model_index == 2 
    #include "SANS_sasview_model_files/sas_lamellarCailleHG32_YMPxp7.c" 
  #endif 
  #if model_index == 3 
    #include "SANS_sasview_model_files/sas_lamellar32_6RVlIH.c" 
  #endif 
  #if model_index == 4 
    #include "SANS_sasview_model_files/sas_parallelepiped32_4bSc95.c" 
  #endif 
  #if model_index == 5 
    #include "SANS_sasview_model_files/sas_bcc_paracrystal32_m6mbhn.c" 
  #endif 
  #if model_index == 6 
    #include "SANS_sasview_model_files/sas_lamellarPC32_uZ9el7.c" 
  #endif 
  #if model_index == 7 
    #include "SANS_sasview_model_files/sas_barbell32_kbqWfA.c" 
  #endif 
  #if model_index == 8 
    #include "SANS_sasview_model_files/sas_sphere32_MsCEvQ.c" 
  #endif 
  #if model_index == 9 
    #include "SANS_sasview_model_files/sas_bcc_paracrystal32_qJBt8P.c" 
  #endif 
  #if model_index == 10 
    #include "SANS_sasview_model_files/sas_fcc_paracrystal32_XguHmt.c" 
  #endif 
  #if model_index == 11 
    #include "SANS_sasview_model_files/sas_barbell32_0zkew9.c" 
  #endif 
  #if model_index == 12 
    #include "SANS_sasview_model_files/sas_capped_cylinder32_gnYw8c.c" 
  #endif 
  #if model_index == 13 
    #include "SANS_sasview_model_files/sas_triaxial_ellipsoid32_7ZHc5D.c" 
  #endif 
  #if model_index == 14 
    #include "SANS_sasview_model_files/sas_cylinder32_VxZ4PD.c" 
  #endif 
  #if model_index == 15 
    #include "SANS_sasview_model_files/sas_HayterMSAsq32_J3F_Y2.c" 
  #endif 
  #if model_index == 16 
    #include "SANS_sasview_model_files/sas_cylinder32_W1213X.c" 
  #endif 
  #if model_index == 17 
    #include "SANS_sasview_model_files/sas_bcc_paracrystal32_IffCrP.c" 
  #endif 
  #if model_index == 18 
    #include "SANS_sasview_model_files/sas_HayterMSAsq32_zO1ror.c" 
  #endif 
  #if model_index == 19 
    #include "SANS_sasview_model_files/sas_lamellarPS32_hjLemS.c" 
  #endif 
  #if model_index == 20 
    #include "SANS_sasview_model_files/sas_sphere32_EK1MLR.c" 
  #endif 
  #if model_index == 21 
    #include "SANS_sasview_model_files/sas_hardsphere32_9U9Ub7.c" 
  #endif 
  #if model_index == 22 
    #include "SANS_sasview_model_files/sas_gaussian_peak32_yZtN6R.c" 
  #endif 
  #if model_index == 23 
    #include "SANS_sasview_model_files/sas_ellipsoid32_fTHLZo.c" 
  #endif 
  #if model_index == 24 
    #include "SANS_sasview_model_files/sas_stickyhardsphere32_qzzAA4.c" 
  #endif 
  #if model_index == 25 
    #include "SANS_sasview_model_files/sas_sphere32_H4n7Yt.c" 
  #endif 
  #if model_index == 26 
    #include "SANS_sasview_model_files/sas_dab32_5OZC_6.c" 
  #endif 
  // AUTOGEN_END_A
  
  float model_pars_ptr[] = model_pars;

  double R=100;
  double Phi=1e-3;
  double Delta_rho=0.6;
  double sigma_abs=0.50;
  double my_s_pre, my_a_v, q_v, q, shape;
%}

INITIALIZE
%{
  shape=-1;  /* -1:no shape, 0:cyl, 1:box, 2:sphere  */
  if (xwidth && yheight && zdepth)  
    shape=1; 
  else if (radius > 0 && yheight)   
    shape=0; 
  else if (radius > 0 && !yheight)  
    shape=2; 
  if (shape < 0) 
    exit(fprintf(stderr, "Sans_spheres: %s: sample has invalid dimensions.\n"
                         "ERROR     Please check parameter values.\n", NAME_CURRENT_COMP));
  
  /* now compute target coords if a component index is supplied */
  if (!target_index && !target_x && !target_y && !target_z) target_index=1;
  if (target_index)
  {
    Coords ToTarget;
    ToTarget = coords_sub(POS_A_COMP_INDEX(INDEX_CURRENT_COMP+target_index),POS_A_CURRENT_COMP);
    ToTarget = rot_apply(ROT_A_CURRENT_COMP, ToTarget);
    coords_get(ToTarget, &target_x, &target_y, &target_z);
  }

  if (!(target_x || target_y || target_z)) {
    printf("Sans_spheres: %s: The target is not defined. Using direct beam (Z-axis).\n",
      NAME_CURRENT_COMP);
    target_z=1;
  }

  my_a_v = sigma_abs*2200*100; /* Is not yet divided by v. 100: Convert barns -> fm^2 */
  my_s_pre = Phi * 4*PI*R*R*R/3 * Delta_rho*Delta_rho;
%}

TRACE
%{
  double t0, t1, v, l_full, l, l_1, dt, d_phi, theta, my_s;
  double aim_x=0, aim_y=0, aim_z=1, axis_x, axis_y, axis_z;
  double arg, tmp_vx, tmp_vy, tmp_vz, vout_x, vout_y, vout_z;
  double f, solid_angle, vx_i, vy_i, vz_i, qx, qy, qz;
  char intersect=0;

  /* Intersection neutron trajectory / sample (sample surface) */
  if (shape == 0)
    intersect = cylinder_intersect(&t0, &t1, x, y, z, vx, vy, vz, radius, yheight);
  else if (shape == 1)
    intersect = box_intersect(&t0, &t1, x, y, z, vx, vy, vz, xwidth, yheight, zdepth);
  else if (shape == 2)
    intersect = sphere_intersect(&t0, &t1, x, y, z, vx, vy, vz, radius);
  if(intersect)
  {
    if(t0 < 0)
      ABSORB;
    
    /* Neutron enters at t=t0. */
    v = sqrt(vx*vx + vy*vy + vz*vz);
    l_full = v * (t1 - t0);       /* Length of full path through sample */
    dt = rand01()*(t1 - t0) + t0; /* Time of scattering */
    PROP_DT(dt);                  /* Point of scattering */
    l = v*(dt-t0);                /* Penetration in sample */

    vx_i=vx;
    vy_i=vy;
    vz_i=vz;
    if ((target_x || target_y || target_z)) {
      aim_x = target_x-x;       /* Vector pointing at target (anal./det.) */
      aim_y = target_y-y;
      aim_z = target_z-z;
    }
    if(focus_aw && focus_ah) {
      randvec_target_rect_angular(&vx, &vy, &vz, &solid_angle,
        aim_x, aim_y, aim_z, focus_aw, focus_ah, ROT_A_CURRENT_COMP);
    } else if(focus_xw && focus_yh) {
      randvec_target_rect(&vx, &vy, &vz, &solid_angle,
        aim_x, aim_y, aim_z, focus_xw, focus_yh, ROT_A_CURRENT_COMP);
    } else {
      randvec_target_circle(&vx, &vy, &vz, &solid_angle, aim_x, aim_y, aim_z, focus_r);
    }
    NORM(vx, vy, vz);
    vx *= v;
    vy *= v;
    vz *= v;
    qx = V2K*(vx_i-vx);
    qy = V2K*(vy_i-vy);
    qz = V2K*(vz_i-vz);
    q = sqrt(qx*qx+qy*qy+qz*qz);

    //f = 3 * (sin(q*R) - q*R*cos(q*R))/(q*R*q*R*q*R);
    
    // call the appropriate Iq(...)
    // AUTOGEN_B
    float Iq_answer = 1; 
    #if SASVIEW_MODEL == 0 
      //Iq_answer = NaN; 
    #endif 
    #if model_index == 1 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4], model_pars_ptr[5]); 
    #endif 
    #if model_index == 2 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4], model_pars_ptr[5], model_pars_ptr[6], model_pars_ptr[7]); 
    #endif 
    #if model_index == 3 
      //Iq_answer = Iq(q, model_pars_ptr[0]); 
    #endif 
    #if model_index == 4 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4]); 
    #endif 
    #if model_index == 5 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4]); 
    #endif 
    #if model_index == 6 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4], model_pars_ptr[5]); 
    #endif 
    #if model_index == 7 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4]); 
    #endif 
    #if model_index == 8 
      //Iq_answer = Iq(q, model_pars_ptr[0]); 
    #endif 
    #if model_index == 9 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4]); 
    #endif 
    #if model_index == 10 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4]); 
    #endif 
    #if model_index == 11 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4]); 
    #endif 
    #if model_index == 12 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4]); 
    #endif 
    #if model_index == 13 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4]); 
    #endif 
    #if model_index == 14 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3]); 
    #endif 
    #if model_index == 15 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4], model_pars_ptr[5]); 
    #endif 
    #if model_index == 16 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3]); 
    #endif 
    #if model_index == 17 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4]); 
    #endif 
    #if model_index == 18 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4], model_pars_ptr[5]); 
    #endif 
    #if model_index == 19 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3], model_pars_ptr[4], model_pars_ptr[5]); 
    #endif 
    #if model_index == 20 
      //Iq_answer = Iq(q, model_pars_ptr[0]); 
    #endif 
    #if model_index == 21 
      //Iq_answer = Iq(q, model_pars_ptr[0]); 
    #endif 
    #if model_index == 22 
      //Iq_answer = Iq(q, model_pars_ptr[0]); 
    #endif 
    #if model_index == 23 
      //Iq_answer = Iq(q, model_pars_ptr[0], model_pars_ptr[1], model_pars_ptr[2], model_pars_ptr[3]); 
    #endif 
    #if model_index == 24 
      //Iq_answer = Iq(q, model_pars_ptr[0]); 
    #endif 
    #if model_index == 25 
      //Iq_answer = Iq(q, model_pars_ptr[0]); 
    #endif 
    #if model_index == 26 
      //Iq_answer = Iq(q, model_pars_ptr[0]); 
    #endif 
    // AUTOGEN_END_B
    
    l_1 = v*t1;
    //p *= l_full*solid_angle/(4*PI)*my_s_pre*f*f*exp(-my_a_v*(l+l_1)/v);
    p *= l_full*solid_angle/(4*PI)*Iq_answer*exp(-my_a_v*(l+l_1)/v);
    
    SCATTER;
  }
%}

MCDISPLAY
%{
  magnify("xyz");
  if (shape == 0) {	/* cylinder */
    circle("xz", 0,  yheight/2.0, 0, radius);
    circle("xz", 0, -yheight/2.0, 0, radius);
    line(-radius, -yheight/2.0, 0, -radius, +yheight/2.0, 0);
    line(+radius, -yheight/2.0, 0, +radius, +yheight/2.0, 0);
    line(0, -yheight/2.0, -radius, 0, +yheight/2.0, -radius);
    line(0, -yheight/2.0, +radius, 0, +yheight/2.0, +radius);
  }
  else if (shape == 1) { 	/* box */
    double xmin = -0.5*xwidth;
    double xmax =  0.5*xwidth;
    double ymin = -0.5*yheight;
    double ymax =  0.5*yheight;
    double zmin = -0.5*zdepth;
    double zmax =  0.5*zdepth;
    multiline(5, xmin, ymin, zmin,
                 xmax, ymin, zmin,
                 xmax, ymax, zmin,
                 xmin, ymax, zmin,
                 xmin, ymin, zmin);
    multiline(5, xmin, ymin, zmax,
                 xmax, ymin, zmax,
                 xmax, ymax, zmax,
                 xmin, ymax, zmax,
                 xmin, ymin, zmax);
    line(xmin, ymin, zmin, xmin, ymin, zmax);
    line(xmax, ymin, zmin, xmax, ymin, zmax);
    line(xmin, ymax, zmin, xmin, ymax, zmax);
    line(xmax, ymax, zmin, xmax, ymax, zmax);
  }
  else if (shape == 2) {	/* sphere */
    circle("xy", 0,  0.0, 0, radius);
    circle("xz", 0,  0.0, 0, radius);
    circle("yz", 0,  0.0, 0, radius);        
  }
%}
END

