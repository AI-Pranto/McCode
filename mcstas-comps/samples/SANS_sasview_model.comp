/*******************************************************************************
*
* Component: SANS_sasview_model
*
* %I
* Written by: Jakob Garde (based on Sans_spheres)
* Date: 22.06.2015
* Version: 0.2
* Origin: DTU
* Release: n/a
*
* This sample component applies sasview models as scattering kernels.
* NOTE: add the flag "-std=c99" to "C flags" in the mcgui or mcgui-py config.
*
* %D
* Shape:        - A filled box with dimensions xwidth, yheight and zdepth. 
*               - A cylinder with dimensions radius and yheight.
*               - A filled sphere given by radius. 
* These parameters are mutually exclusive.
*
* Example:      SANS_sasview_model(model_index=1, model_pars={100.0, 1e-3, 0.6, 0.50}, 
*                                  xwidth=0.01, yheight=0.01, zdepth=0.005)
* 
* %P
* Definition parameters:
* 
* model_index:  Index of sasview model, according to the autogenerated list below.
*               The corresponding sasview model .c file becomes hardcoded into the instrument
*               at instrument compile time. This means that this parameter can not become an
*               instrument parameter, in which case it the value 0 will always be assigned 
*               to it.
*
*               Models: 
*               0 - none
*               1 - sas_sphere32_MsCEvQ
*               2 - sas_cylinder32_W1213X
*               3 - sas_bcc_paracrystal32_IffCrP
*               
* model_pars:   The sasview model parameters. These must be ordered correctly wrt. the sasview 
*               documentation, and be called on the form (ex.): model_pars={1.0, 2.0, 3.0, ...}
*               in the instrument file.
*
* Input parameters:
*
* radius:       Outer radius of sample in (x,z) plane for cylinder/sphere [m]
* xwidth:       horiz. dimension of sample, as a width (m)
* yheight:      vert . dimension of sample, as a height for cylinder/box (m)
* zdepth:       depth of sample (m)
* target_index: Relative index of component to focus at, e.g. next is +1 [1]
* focus_xw:     horiz. dimension of a rectangular area [m]
* focus_yh:     vert.  dimension of a rectangular area [m]
* focus_aw:     horiz. angular dimension of a rectangular area [deg]
* focus_ah:     vert.  angular dimension of a rectangular area [deg]
* focus_r:      Detector (disk-shaped) radius (m)
*
* Optional parameters:
* target_x:     -\
* target_y:      3- relative focus target position [m]
* target_z:     -/
*
* Variables calculated in the component:
*
* my_s:         Attenuation factor due to scattering (m^-1)
* my_a:         Attenuation factor due to absorbtion (m^-1)
*
* %Link
* <link to sasview models documentation>
*
* %E
*******************************************************************************/

DEFINE COMPONENT SANS_sasview_model

DEFINITION PARAMETERS (
    int model_index=0,
    model_pars/*={1.0, 2.0, 3.0, 4.0}*/)

SETTING PARAMETERS (
    xwidth=0, 
    yheight=0, 
    zdepth=0, 
    radius=0, 
    target_x=0, 
    target_y=0, 
    target_z=6, 
    int target_index=0, 
    focus_xw=0, 
    focus_yh=0, 
    focus_aw=0, 
    focus_ah=0, 
    focus_r=0)

OUTPUT PARAMETERS (
    my_s_v2, 
    my_a_v, 
    shape)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */ 

DECLARE
%{
  // include the appropriate sasview model file (autogenerated section)
  #if model_index == 1
    #include "sasview_model_files/sas_sphere32_MsCEvQ.c"
  #endif
  #if model_index == 2
    #include "sasview_model_files/sas_cylinder32_W1213X.c"
  #endif
  #if model_index == 3
    #include "sasview_model_files/sas_bcc_paracrystal32_IffCrP.c"
  #endif
  // (end of autogenerated section)
  
  float model_pars_ptr[] = model_pars;

  double R=100;
  double Phi=1e-3;
  double Delta_rho=0.6;
  double sigma_abs=0.50;
  double my_s_pre, my_a_v, q_v, q, shape;
%}

INITIALIZE
%{

  shape=-1;  /* -1:no shape, 0:cyl, 1:box, 2:sphere  */
  if (xwidth && yheight && zdepth)  
    shape=1; 
  else if (radius > 0 && yheight)   
    shape=0; 
  else if (radius > 0 && !yheight)  
    shape=2; 
  if (shape < 0) 
    exit(fprintf(stderr, "Sans_spheres: %s: sample has invalid dimensions.\n"
                         "ERROR     Please check parameter values.\n", NAME_CURRENT_COMP));
  
  /* now compute target coords if a component index is supplied */
  if (!target_index && !target_x && !target_y && !target_z) target_index=1;
  if (target_index)
  {
    Coords ToTarget;
    ToTarget = coords_sub(POS_A_COMP_INDEX(INDEX_CURRENT_COMP+target_index),POS_A_CURRENT_COMP);
    ToTarget = rot_apply(ROT_A_CURRENT_COMP, ToTarget);
    coords_get(ToTarget, &target_x, &target_y, &target_z);
  }

  if (!(target_x || target_y || target_z)) {
    printf("Sans_spheres: %s: The target is not defined. Using direct beam (Z-axis).\n",
      NAME_CURRENT_COMP);
    target_z=1;
  }

  my_a_v = sigma_abs*2200*100; /* Is not yet divided by v. 100: Convert barns -> fm^2 */
  my_s_pre = Phi * 4*PI*R*R*R/3 * Delta_rho*Delta_rho;
%}

TRACE
%{
  double t0, t1, v, l_full, l, l_1, dt, d_phi, theta, my_s;
  double aim_x=0, aim_y=0, aim_z=1, axis_x, axis_y, axis_z;
  double arg, tmp_vx, tmp_vy, tmp_vz, vout_x, vout_y, vout_z;
  double f, solid_angle, vx_i, vy_i, vz_i, qx, qy, qz;
  char intersect=0;

  /* Intersection neutron trajectory / sample (sample surface) */
  if (shape == 0)
    intersect = cylinder_intersect(&t0, &t1, x, y, z, vx, vy, vz, radius, yheight);
  else if (shape == 1)
    intersect = box_intersect(&t0, &t1, x, y, z, vx, vy, vz, xwidth, yheight, zdepth);
  else if (shape == 2)
    intersect = sphere_intersect(&t0, &t1, x, y, z, vx, vy, vz, radius);
  if(intersect)
  {
    if(t0 < 0)
      ABSORB;
    /* Neutron enters at t=t0. */
    v = sqrt(vx*vx + vy*vy + vz*vz);
    l_full = v * (t1 - t0);             /* Length of full path through sample */
    dt = rand01()*(t1 - t0) + t0; /* Time of scattering */
    PROP_DT(dt);                  /* Point of scattering */
    l = v*(dt-t0);                /* Penetration in sample */

    vx_i=vx;
    vy_i=vy;
    vz_i=vz;
    if ((target_x || target_y || target_z)) {
      aim_x = target_x-x;       /* Vector pointing at target (anal./det.) */
      aim_y = target_y-y;
      aim_z = target_z-z;
    }
    if(focus_aw && focus_ah) {
      randvec_target_rect_angular(&vx, &vy, &vz, &solid_angle,
        aim_x, aim_y, aim_z, focus_aw, focus_ah, ROT_A_CURRENT_COMP);
    } else if(focus_xw && focus_yh) {
      randvec_target_rect(&vx, &vy, &vz, &solid_angle,
        aim_x, aim_y, aim_z, focus_xw, focus_yh, ROT_A_CURRENT_COMP);
    } else {
      randvec_target_circle(&vx, &vy, &vz, &solid_angle, aim_x, aim_y, aim_z, focus_r);
    }
    NORM(vx, vy, vz);
    vx *= v;
    vy *= v;
    vz *= v;
    qx = V2K*(vx_i-vx);
    qy = V2K*(vy_i-vy);
    qz = V2K*(vz_i-vz);
    q = sqrt(qx*qx+qy*qy+qz*qz);

    f = 3 * (sin(q*R) - q*R*cos(q*R))/(q*R*q*R*q*R);

    l_1 = v*t1;
    p *= l_full*solid_angle/(4*PI)*my_s_pre*f*f*exp(-my_a_v*(l+l_1)/v);
    
    // call the appropriate Iq(...) (autogenerated section)
    // TODO: integrate into the above
        // EXAMPLES: 

        // sasmodels - cylinder
        //float r1=40.0;
        //float l1=120.0;
        //vol_cyl=form_volume(r1,l1);
        //Iq2 =Iq(q, 4.0,1.0,40.0,120.0);
        //Iq2 = Iq2 * 1.0 / vol_cyl;
        //printf("%f \t %f \n",q, Iq2);

        // sasmodels - sphere
        //float r1=R;
        //vol_cyl=form_volume(r1);
        //Iq2 =Iq(q, 7.0,1.0,100.0);
        //Iq2 = Iq2 * 1.0 / vol_cyl;
        //printf("%f \t %f \t %f \n",q, Iq2, my_s_pre*f*f);

    // TODO: unravel working method to include the Iq(...) calls into mcstas (cogen)

    //float Iq_value;
    #if SASVIEW_MODEL == 0
      //Iq_value = NaN;
    #endif
    #if SASVIEW_MODEL == 1
      //Iq_value = Iq(q, model_pars[0], model_pars[1], model_pars[2]);
    #endif
    #if SASVIEW_MODEL == 2
      //Iq_value = Iq(q, model_pars[0], model_pars[1], model_pars[2], model_pars[3]);
    #endif
    #if SASVIEW_MODEL == 3
      //Iq_value = Iq(q, model_pars[0], model_pars[1], model_pars[2], model_pars[3], model_pars[4]);
    #endif

    SCATTER;
  }
%}

MCDISPLAY
%{
  magnify("xyz");
  if (shape == 0) {	/* cylinder */
    circle("xz", 0,  yheight/2.0, 0, radius);
    circle("xz", 0, -yheight/2.0, 0, radius);
    line(-radius, -yheight/2.0, 0, -radius, +yheight/2.0, 0);
    line(+radius, -yheight/2.0, 0, +radius, +yheight/2.0, 0);
    line(0, -yheight/2.0, -radius, 0, +yheight/2.0, -radius);
    line(0, -yheight/2.0, +radius, 0, +yheight/2.0, +radius);
  }
  else if (shape == 1) { 	/* box */
    double xmin = -0.5*xwidth;
    double xmax =  0.5*xwidth;
    double ymin = -0.5*yheight;
    double ymax =  0.5*yheight;
    double zmin = -0.5*zdepth;
    double zmax =  0.5*zdepth;
    multiline(5, xmin, ymin, zmin,
                 xmax, ymin, zmin,
                 xmax, ymax, zmin,
                 xmin, ymax, zmin,
                 xmin, ymin, zmin);
    multiline(5, xmin, ymin, zmax,
                 xmax, ymin, zmax,
                 xmax, ymax, zmax,
                 xmin, ymax, zmax,
                 xmin, ymin, zmax);
    line(xmin, ymin, zmin, xmin, ymin, zmax);
    line(xmax, ymin, zmin, xmax, ymin, zmax);
    line(xmin, ymax, zmin, xmin, ymax, zmax);
    line(xmax, ymax, zmin, xmax, ymax, zmax);
  }
  else if (shape == 2) {	/* sphere */
    circle("xy", 0,  0.0, 0, radius);
    circle("xz", 0,  0.0, 0, radius);
    circle("yz", 0,  0.0, 0, radius);        
  }
%}
END

