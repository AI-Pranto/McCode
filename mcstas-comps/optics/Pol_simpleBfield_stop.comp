/**************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2006, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Pol_simpleBfield_stop
*
* %I
* Written by: Peter Christiansen and Peter Willendrup
* Date: August 2006
* Origin: RISOE
*
* Magnetic field component.
*
* %D 
*
* End of magnetic field region defined by a previous Pol_simpleBfield component.
*
* The component is concentric. It means that it requires a 
*
* // START MAGNETIC FIELD
* COMPONENT msf =
* Pol_simpleBfield(xw=0.08, yh=0.08, length=0.2, Bx=0, By=-0.678332e-4, Bz=0)
*      AT (0, 0, 0) RELATIVE armMSF
*
* // HERE CAN BE OTHER COMPONENTS INSIDE THE MAGNETIC FIELD
*
* // STOP MAGNETIC FIELD
* COMPONENT msfCp = Pol_simpleBfield_stop(msf)
*      AT ("SOMEWHERE") RELATIVE armMSF
*
* In between the two components the propagation routine
* PROP_DT also handles the spin propagation.
* The current algorithm used for spin propagation is:
* SimpleNumMagnetPrecession
* in pol-lib.
* and does not handle gravity.
*
* GRAVITY: NO
* POLARISATION: YES
*
* Example: Pol_simpleBfield_stop(Pol_simpleBfield_stop)
*
* %P
* INPUT PARAMETERS:
*
* magnet_comp_stop: [ ]  name of the component indicating start of the magnet volume.
* 
* %E
****************************************************************************/

DEFINE COMPONENT Pol_simpleBfield_stop
DEFINITION PARAMETERS (magnet_comp_stop=NULL)
SETTING PARAMETERS (string geometry="", yheight, xwidth, zdepth, radius)
OUTPUT PARAMETERS(prms)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */

SHARE
%{
    %include "pol-lib"
%}

INITIALIZE
%{
    /*if dimensions are set - we should use them - if not get them from the start component*/
    if(magnet_stop_comp){
        if (!yheight) yheight=MCGET_PAR(magnet_stop_comp);
        if (!xwidth) xwidth=MCGET_PAR(magnet_stop_comp);
        if (!zdepth) zdepth=MCGET_PAR(magnet_stop_comp);
        if (!radius) radius=MCGET_PAR(magnet_stop_comp);
    }
    if(geometry){
        prms.shape=ANY;
    }else if(xwidth && yheight && zdepth){
        prms.shape=BOX;
    }else if (xwidth && yheight && !zdepth){
        prms.shape=WINDOW;
    }else if(radius && yheight){
        prms.shape=CYLINDER;
    }else if (radius) {
        prms.shape=SPHERE;
    }else{
        prms.shape=NONE;
    }  
%}

TRACE
%{
    double l0,l1,l2,l3;
    int nofield=0;
    /*enter through whatever object we are*/
    switch (prms.SHAPE){
        case BOX:
            box_intersect(&l0,&l1,x,y,z,vx,vy,vz,xwidth,yheight,zdepth);
            if (l0>0) PROP_DL(l0);/*this is to get a hollow inside the field.*/
            else PROP_DL(l1);
            break;
        case CYLINDER:
            cylinder_intersect(&l0,&l1,x,y,z,vx,vy,vz,radius,yheight);/*this is to get a hollow inside the field.*/
            if (l0>0) PROP_DL(l0);
            else PROP_DL(l1);
            break;
        case WINDOW:
            PROP_Z0;
            /*terminate neutrons which miss the exit window*/
            if (2*x>xwidth || 2*x<-xwidth || 2*y>yheight || 2*y<-yheight){
                ABSORB;
            }
            break;
        case default:
            PROP_Z0; 
    }
    mcmagnet_pop();
%}

END
