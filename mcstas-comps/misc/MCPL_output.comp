/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright (C) 1997-2007, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France

* Component: MCPL_output
*
* %I
* Written by: Erik B Knudsen 
* Date: Mar 2016
* Version: $Revision$
* Origin: DTU Physics
* Release: McStas 2.3
*
* Detector-like component that writes neutron state parameters into an mcpl-format 
* binary, virtual-source neutron file.
*
* %D
* long description
* %BUGS
*
* %P
* INPUT PARAMETERS
*
* filename: [str] Name of neutron file to write. Default is standard
*                 output [string]. If not given, a unique name will be used.
* bufsize:  [1]   Size of neutron output buffer
*                 default is 0, i.e. save all - recommended.
*
* %E
*******************************************************************************/

DEFINE COMPONENT MCPL_output
DEFINITION PARAMETERS (polarisationuse=1, doubleprec=1, dump_file=0)
SETTING PARAMETERS (string filename=0)
OUTPUT PARAMETERS (outputfile)
DEPENDENCY "-I@MCCODE_LIB@/share -L@MCCODE_LIB@/libs/mcpl -lmcpl"

SHARE
%{
#include "mcpl.h"
%}

DECLARE
%{
    mcpl_outfile_t outputfile;
%}

INITIALIZE
%{
    char line[256];
    outputfile = mcpl_create_outfile(filename);
    snprintf(line,255,"%s %s %s",MCCODE_NAME,MCCODE_VERSION,mcinstrument_name);
    mcpl_hdr_set_srcname(outputfile,line);
    mcpl_enable_universal_pdgcode(outputfile,2112);//all particles are neutrons
    snprintf(line,255,"Output by COMPONENT: %s",NAME_CURRENT_COMP);
    mcpl_hdr_add_comment(outputfile,line);

    if (polarisationuse) {
        mcpl_enable_polarisation(outputfile);
    }
    if (doubleprec){
        mcpl_enable_doubleprec(outputfile);
    }

%}

TRACE
%{
    double nrm;
    mcpl_particle_t *particle = (mcpl_particle_t *) calloc(sizeof(mcpl_particle_t),1);
    particle->position[0]=x;
    particle->position[1]=y;
    particle->position[2]=z;

    if(polarisationuse){
        particle->polarisation[0]=sx;
        particle->polarisation[1]=sy;
        particle->polarisation[2]=sz;
    }

    nrm =sqrt(vx*vx + vy*vy + vz*vz);
    /*ekin is in MeV:*/
    particle->ekin = 1e6*VS2E*nrm;
    particle->direction[0] = vx/nrm;
    particle->direction[1] = vy/nrm;
    particle->direction[2] = vz/nrm;
    /*time in ms:*/
    particle->time = t*1e3;
    /*weight in unspecified units:*/
    particle->weight = p;

    mcpl_add_particle(outputfile,particle);
    
    SCATTER;
%}

SAVE
%{
    mcpl_close_outfile(outputfile);  
%}

FINALLY
%{
    if (dump_file) mcpl_dump(filename,0,0,(int) dump_file);
%}

MCDISPLAY
%{
    double t,dt;
    int i;
    multiline(5, 0.2,0.2,0.0, -0.2,0.2,0.0, -0.2,-0.2,0.0, 0.2,-0.2,0.0, 0.2,0.2,0.0);
    /*M*/
    multiline(5,-0.085,-0.085,0.0, -0.085,0.085,0.0, -0.045,-0.085,0.0, -0.005,0.085,0.0, -0.005,-0.085,0.0);
    /*O*/
    dt=2*M_PI/32;
    t=0;
    for (i=0;i<32;i++){
        line(0.04*cos(t)+0.045,0.08*sin(t),0, 0.04*cos(t+dt)+0.045,0.08*sin(t+dt),0);
        t+=dt;
    }
%}

END

