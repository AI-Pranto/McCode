This document lists build dependencies and explains use of the ./build_* scripts:

!!! IMPORTANT !!! When cmake is listed below, it is silently assumed cmake >= cmake 3 which supports the "target_compile_options" directive


* Debian packages ford 64bit systems. Input parameters - 1) release "name", i.e. 2.1
1) First ensure you have build-dependencies by running the getdeps_debian script and following in-terminal instructions
2) Then run the below command for your build. (the <meta> flag allows building "meta-packages" like mcstas-suite-python etc.)
   build_debs_mcstas <release name> <meta>
   build_debs_mcxtrace <release name> <meta>


* RedHat packages for 32bit and 64bit systems. Input parameters - 1) release "name", i.e. 2.1
build_rpms_mcstas <release name>
build_rpms_mcxtrace <release name>
Dependencies:
cmake cpack rpm texlive texlive-imakeidx texlive-biblatex texlive-idxlayout gcc flex bison libc6-dev etoolbox (Check on clean system if this is enough!!)
Configuration - dpkg-reconfigure dash, select not to use dash as /bin/sh


* "Generic Unix" 64bit tgz packages. Input parameters - 1) release "name", i.e. 2.1
1) First ensure you have build-dependencies by running on of the relevant getdeps_ scripts and following in-terminal instructions
2) Then run the below command for your build (the <meta> flag allows building TAR-based "meta-packages")
   build_src_bin_mcstas <release name>
   build_src_bin_mcxtrace <release name>


* Mac OS X packages for 64bit systems. Input parameters - 1) release "name", i.e. 2.1 2) flag to indicate if we are building a 'meta' package
1) First ensure you have build-dependencies by running the getdeps_mac script and following in-terminal instructions
2) Then run the below command for your build (the <keep> flag allows to keep the built application bundle in /Applications and not do an arcive in dist/)
   build_macos_mcstas <release name> <keep>
   build_macos_mcxtrace <release name> <keep>


* Windows packages for 32bit (and 64bit - running the 32bit version) systems. Input parameters - 1) release "name", i.e. 2.1 2) flag to indicate if we are building a 'meta' package. Built on Linux!!
build_windows_mcstas  <release name> <meta> 
build_windows_mcxtrace  <release name> <meta> 
Dependencies:





(run dpkg --add-architecture i386)
cmake cpack nsis texlive latexmk bibtex mingw-w64 flex bison libc6-dev wine-bin:i386 (Check on clean system if this is enough!!)

To build the windows 'metapackage' from Linux, you need to install wine:i386 and inno setup (within wine), following the below instructions.

IMPORTANT: The i386 suffix for the wine package is important as the inno setup nbinary will be installed in a wrong location otherwise...

- https://katastrophos.net/andre/blog/2009/03/16/setting-up-the-inno-setup-compiler-on-debian/

( Along the lines of:
  	• mkdir /tmp/innosetup  
	• cd /tmp/innosetup  
	• wget http://files.jrsoftware.org/ispack/ispack-5.2.3.exe  
	• wine ./ispack-5.2.3.exe
)
